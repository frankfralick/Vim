add(words, {'word': 'Add(', 'abbr': 'Add(Element item)', 'info': "No documentation", 'icase': 1, 'dup':1 })
add(words, {'word': 'Aggregate(', 'abbr': 'Aggregate(this IEnumerable<TSource> source, Func<TSource, TSource, TSource> func)', 'info': "Aggregate(this IEnumerable<TSource> source, Func<TSource, TSource, TSource> func)\nApplies an accumulator function over a sequence.\nReturns: The final accumulator value.\nsource: An System.Collections.Generic.IEnumerable`1 to aggregate over.\nfunc: An accumulator function to be invoked on each element.The type of the elements of source.\nSystem.ArgumentNullException: source or func is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Aggregate(', 'abbr': 'Aggregate(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func)', 'info': "Aggregate(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func)\nApplies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.\nReturns: The final accumulator value.\nsource: An System.Collections.Generic.IEnumerable`1 to aggregate over.\nseed: The initial accumulator value.\nfunc: An accumulator function to be invoked on each element.The type of the elements of source.The type of the accumulator value.\nSystem.ArgumentNullException: source or func is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Aggregate(', 'abbr': 'Aggregate(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)', 'info': "Aggregate(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)\nApplies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.\nReturns: The transformed final accumulator value.\nsource: An System.Collections.Generic.IEnumerable`1 to aggregate over.\nseed: The initial accumulator value.\nfunc: An accumulator function to be invoked on each element.\nresultSelector: A function to transform the final accumulator value into the result value.The type of the elements of source.The type of the accumulator value.The type of the resulting value.\nSystem.ArgumentNullException: source or func or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'All(', 'abbr': 'All(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "All(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nDetermines whether all elements of a sequence satisfy a condition.\nReturns: true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false.\nsource: An System.Collections.Generic.IEnumerable`1 that contains the elements to apply the predicate to.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Any(', 'abbr': 'Any(this IEnumerable<TSource> source)', 'info': "Any(this IEnumerable<TSource> source)\nDetermines whether a sequence contains any elements.\nReturns: true if the source sequence contains any elements; otherwise, false.\nsource: The System.Collections.Generic.IEnumerable`1 to check for emptiness.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Any(', 'abbr': 'Any(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "Any(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nDetermines whether any element of a sequence satisfies a condition.\nReturns: true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to apply the predicate to.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'AsEnumerable(', 'abbr': 'AsEnumerable(this IEnumerable<TSource> source)', 'info': "AsEnumerable(this IEnumerable<TSource> source)\nReturns the input typed as System.Collections.Generic.IEnumerable`1.\nReturns: The input sequence typed as System.Collections.Generic.IEnumerable`1.\nsource: The sequence to type as System.Collections.Generic.IEnumerable`1.The type of the elements of source.", 'icase': 1, 'dup':1 })
add(words, {'word': 'AsParallel(', 'abbr': 'AsParallel(this IEnumerable source)', 'info': "AsParallel(this IEnumerable source)\nEnables parallelization of a query.\nReturns: The source as a ParallelQuery to bind to ParallelEnumerable extension methods.\nsource: An System.Collections.Generic.IEnumerable to convert to a System.Linq.ParallelQuery.\nSystem.ArgumentNullException: source is a null reference (Nothing in Visual Basic).", 'icase': 1, 'dup':1 })
add(words, {'word': 'AsParallel(', 'abbr': 'AsParallel(this IEnumerable<TSource> source)', 'info': "AsParallel(this IEnumerable<TSource> source)\nEnables parallelization of a query.\nReturns: The source as a System.Linq.ParallelQuery`1 to bind to ParallelEnumerable extension methods.\nsource: An System.Collections.Generic.IEnumerable`1 to convert to a System.Linq.ParallelQuery`1.The type of elements of source.\nSystem.ArgumentNullException: source is a null reference (Nothing in Visual Basic).", 'icase': 1, 'dup':1 })
add(words, {'word': 'AsQueryable(', 'abbr': 'AsQueryable(this IEnumerable source)', 'info': "AsQueryable(this IEnumerable source)\nConverts an System.Collections.IEnumerable to an System.Linq.IQueryable.\nReturns: An System.Linq.IQueryable that represents the input sequence.\nsource: A sequence to convert.\nSystem.ArgumentException: source does not implement System.Collections.Generic.IEnumerable`1 for some T.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'AsQueryable(', 'abbr': 'AsQueryable(this IEnumerable<TElement> source)', 'info': "AsQueryable(this IEnumerable<TElement> source)\nConverts a generic System.Collections.Generic.IEnumerable`1 to a generic System.Linq.IQueryable`1.\nReturns: An System.Linq.IQueryable`1 that represents the input sequence.\nsource: A sequence to convert.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)\nComputes the average of a sequence of nullable System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum of the elements in the sequence is larger than System.Decimal.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, decimal> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, decimal> selector)\nComputes the average of a sequence of System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values.\nsource: A sequence of values that are used to calculate an average.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.\nSystem.OverflowException: The sum of the elements in the sequence is larger than System.Decimal.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, double?> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, double?> selector)\nComputes the average of a sequence of nullable System.Double values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, double> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, double> selector)\nComputes the average of a sequence of System.Double values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, float?> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, float?> selector)\nComputes the average of a sequence of nullable System.Single values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, float> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, float> selector)\nComputes the average of a sequence of System.Single values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, int?> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, int?> selector)\nComputes the average of a sequence of nullable System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum of the elements in the sequence is larger than System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, int> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, int> selector)\nComputes the average of a sequence of System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.\nSystem.OverflowException: The sum of the elements in the sequence is larger than System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, long?> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, long?> selector)\nComputes the average of a sequence of nullable System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, long> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, long> selector)\nComputes the average of a sequence of System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.\nSystem.OverflowException: The sum of the elements in the sequence is larger than System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Cast(', 'abbr': 'Cast(this IEnumerable source)', 'info': "Cast(this IEnumerable source)\nCasts the elements of an System.Collections.IEnumerable to the specified type.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains each element of the source sequence cast to the specified type.\nsource: The System.Collections.IEnumerable that contains the elements to be cast to type TResult.The type to cast the elements of source to.\nSystem.ArgumentNullException: source is null.\nSystem.InvalidCastException: An element in the sequence cannot be cast to type TResult.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Clear()', 'abbr': 'Clear()', 'info': "No documentation", 'icase': 1, 'dup':1 })
add(words, {'word': 'Concat(', 'abbr': 'Concat(this IEnumerable<TSource> first, IEnumerable<TSource> second)', 'info': "Concat(this IEnumerable<TSource> first, IEnumerable<TSource> second)\nConcatenates two sequences.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the concatenated elements of the two input sequences.\nfirst: The first sequence to concatenate.\nsecond: The sequence to concatenate to the first sequence.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Contains(', 'abbr': 'Contains(Element item)', 'info': "No documentation", 'icase': 1, 'dup':1 })
add(words, {'word': 'Contains(', 'abbr': 'Contains(this IEnumerable<TSource> source, TSource value)', 'info': "Contains(this IEnumerable<TSource> source, TSource value)\nDetermines whether a sequence contains a specified element by using the default equality comparer.\nReturns: true if the source sequence contains an element that has the specified value; otherwise, false.\nsource: A sequence in which to locate a value.\nvalue: The value to locate in the sequence.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Contains(', 'abbr': 'Contains(this IEnumerable<TSource> source, TSource value, IEqualityComparer<TSource> comparer)', 'info': "Contains(this IEnumerable<TSource> source, TSource value, IEqualityComparer<TSource> comparer)\nDetermines whether a sequence contains a specified element by using a specified System.Collections.Generic.IEqualityComparer`1.\nReturns: true if the source sequence contains an element that has the specified value; otherwise, false.\nsource: A sequence in which to locate a value.\nvalue: The value to locate in the sequence.\ncomparer: An equality comparer to compare values.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'CopyTo(', 'abbr': 'CopyTo(Element[] array, int arrayIndex)', 'info': "No documentation", 'icase': 1, 'dup':1 })
add(words, {'word': 'Count', 'abbr': 'Count', 'info': "No documentation", 'icase': 1, 'dup':1 })
add(words, {'word': 'DefaultIfEmpty(', 'abbr': 'DefaultIfEmpty(this IEnumerable<TSource> source)', 'info': "DefaultIfEmpty(this IEnumerable<TSource> source)\nReturns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.\nReturns: An System.Collections.Generic.IEnumerable`1 object that contains the default value for the TSource type if source is empty; otherwise, source.\nsource: The sequence to return a default value for if it is empty.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'DefaultIfEmpty(', 'abbr': 'DefaultIfEmpty(this IEnumerable<TSource> source, TSource defaultValue)', 'info': "DefaultIfEmpty(this IEnumerable<TSource> source, TSource defaultValue)\nReturns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains defaultValue if source is empty; otherwise, source.\nsource: The sequence to return the specified value for if it is empty.\ndefaultValue: The value to return if the sequence is empty.The type of the elements of source.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Distinct(', 'abbr': 'Distinct(this IEnumerable<TSource> source)', 'info': "Distinct(this IEnumerable<TSource> source)\nReturns distinct elements from a sequence by using the default equality comparer to compare values.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains distinct elements from the source sequence.\nsource: The sequence to remove duplicate elements from.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Distinct(', 'abbr': 'Distinct(this IEnumerable<TSource> source, IEqualityComparer<TSource> comparer)', 'info': "Distinct(this IEnumerable<TSource> source, IEqualityComparer<TSource> comparer)\nReturns distinct elements from a sequence by using a specified System.Collections.Generic.IEqualityComparer`1 to compare values.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains distinct elements from the source sequence.\nsource: The sequence to remove duplicate elements from.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare values.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ElementAt(', 'abbr': 'ElementAt(this IEnumerable<TSource> source, int index)', 'info': "ElementAt(this IEnumerable<TSource> source, int index)\nReturns the element at a specified index in a sequence.\nReturns: The element at the specified position in the source sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\nindex: The zero-based index of the element to retrieve.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.ArgumentOutOfRangeException: index is less than 0 or greater than or equal to the number of elements in source.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ElementAtOrDefault(', 'abbr': 'ElementAtOrDefault(this IEnumerable<TSource> source, int index)', 'info': "ElementAtOrDefault(this IEnumerable<TSource> source, int index)\nReturns the element at a specified index in a sequence or a default value if the index is out of range.\nReturns: default(TSource) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\nindex: The zero-based index of the element to retrieve.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Equals(', 'abbr': 'Equals(object obj)', 'info': "Equals(object obj)\nDetermines whether the specified System.Object is equal to the current System.Object.\nReturns: true if the specified System.Object is equal to the current System.Object; otherwise, false.\nobj: The object to compare with the current object. ", 'icase': 1, 'dup':1 })
add(words, {'word': 'Except(', 'abbr': 'Except(this IEnumerable<TSource> first, IEnumerable<TSource> second)', 'info': "Except(this IEnumerable<TSource> first, IEnumerable<TSource> second)\nProduces the set difference of two sequences by using the default equality comparer to compare values.\nReturns: A sequence that contains the set difference of the elements of two sequences.\nfirst: An System.Collections.Generic.IEnumerable`1 whose elements that are not also in second will be returned.\nsecond: An System.Collections.Generic.IEnumerable`1 whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Except(', 'abbr': 'Except(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)', 'info': "Except(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\nProduces the set difference of two sequences by using the specified System.Collections.Generic.IEqualityComparer`1 to compare values.\nReturns: A sequence that contains the set difference of the elements of two sequences.\nfirst: An System.Collections.Generic.IEnumerable`1 whose elements that are not also in second will be returned.\nsecond: An System.Collections.Generic.IEnumerable`1 whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare values.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'First(', 'abbr': 'First(this IEnumerable<TSource> source)', 'info': "First(this IEnumerable<TSource> source)\nReturns the first element of a sequence.\nReturns: The first element in the specified sequence.\nsource: The System.Collections.Generic.IEnumerable`1 to return the first element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.InvalidOperationException: The source sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'First(', 'abbr': 'First(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "First(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the first element in a sequence that satisfies a specified condition.\nReturns: The first element in the sequence that passes the test in the specified predicate function.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.\nSystem.InvalidOperationException: No element satisfies the condition in predicate.-or-The source sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'FirstOrDefault(', 'abbr': 'FirstOrDefault(this IEnumerable<TSource> source)', 'info': "FirstOrDefault(this IEnumerable<TSource> source)\nReturns the first element of a sequence, or a default value if the sequence contains no elements.\nReturns: default(TSource) if source is empty; otherwise, the first element in source.\nsource: The System.Collections.Generic.IEnumerable`1 to return the first element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'FirstOrDefault(', 'abbr': 'FirstOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "FirstOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the first element of the sequence that satisfies a condition or a default value if no such element is found.\nReturns: default(TSource) if source is empty or if no element passes the test specified by predicate; otherwise, the first element in source that passes the test specified by predicate.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GetEnumerator()', 'abbr': 'GetEnumerator()', 'info': "No documentation", 'icase': 1, 'dup':1 })
add(words, {'word': 'GetHashCode()', 'abbr': 'GetHashCode()', 'info': "GetHashCode()\nServes as a hash function for a particular type. \nReturns: A hash code for the current System.Object.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GetType()', 'abbr': 'GetType()', 'info': "GetType()\nGets the System.Type of the current instance.\nReturns: The exact runtime type of the current instance.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\nGroups the elements of a sequence according to a specified key selector function.\nReturns: An IEnumerable<IGrouping<TKey, TSource>> in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each System.Linq.IGrouping`2 object contains a sequence of objects and a key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector)\nGroups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.\nReturns: A collection of elements of type TResult where each element represents a projection over a group and its key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nresultSelector: A function to create a result value from each group.The type of the elements of source.The type of the key returned by keySelector.The type of the result value returned by resultSelector.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector, IEqualityComparer<TKey> comparer)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector, IEqualityComparer<TKey> comparer)\nGroups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.\nReturns: A collection of elements of type TResult where each element represents a projection over a group and its key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nresultSelector: A function to create a result value from each group.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys with.The type of the elements of source.The type of the key returned by keySelector.The type of the result value returned by resultSelector.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)\nGroups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.\nReturns: An IEnumerable<IGrouping<TKey, TElement>> in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each System.Linq.IGrouping`2 object contains a collection of objects of type TElement and a key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nelementSelector: A function to map each source element to an element in the System.Linq.IGrouping`2.The type of the elements of source.The type of the key returned by keySelector.The type of the elements in the System.Linq.IGrouping`2.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector)\nGroups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.\nReturns: A collection of elements of type TResult where each element represents a projection over a group and its key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nelementSelector: A function to map each source element to an element in an System.Linq.IGrouping`2.\nresultSelector: A function to create a result value from each group.The type of the elements of source.The type of the key returned by keySelector.The type of the elements in each System.Linq.IGrouping`2.The type of the result value returned by resultSelector.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector, IEqualityComparer<TKey> comparer)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector, IEqualityComparer<TKey> comparer)\nGroups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.\nReturns: A collection of elements of type TResult where each element represents a projection over a group and its key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nelementSelector: A function to map each source element to an element in an System.Linq.IGrouping`2.\nresultSelector: A function to create a result value from each group.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys with.The type of the elements of source.The type of the key returned by keySelector.The type of the elements in each System.Linq.IGrouping`2.The type of the result value returned by resultSelector.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)\nGroups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.\nReturns: An IEnumerable<IGrouping<TKey, TElement>> in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each System.Linq.IGrouping`2 object contains a collection of objects of type TElement and a key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nelementSelector: A function to map each source element to an element in an System.Linq.IGrouping`2.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.The type of the elements in the System.Linq.IGrouping`2.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)\nGroups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.\nReturns: An IEnumerable<IGrouping<TKey, TSource>> in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each System.Linq.IGrouping`2 object contains a collection of objects and a key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupJoin(', 'abbr': 'GroupJoin(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector)', 'info': "GroupJoin(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector)\nCorrelates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements of type TResult that are obtained by performing a grouped join on two sequences.\nouter: The first sequence to join.\ninner: The sequence to join to the first sequence.\nouterKeySelector: A function to extract the join key from each element of the first sequence.\ninnerKeySelector: A function to extract the join key from each element of the second sequence.\nresultSelector: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.The type of the elements of the first sequence.The type of the elements of the second sequence.The type of the keys returned by the key selector functions.The type of the result elements.\nSystem.ArgumentNullException: outer or inner or outerKeySelector or innerKeySelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupJoin(', 'abbr': 'GroupJoin(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector, IEqualityComparer<TKey> comparer)', 'info': "GroupJoin(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector, IEqualityComparer<TKey> comparer)\nCorrelates the elements of two sequences based on key equality and groups the results. A specified System.Collections.Generic.IEqualityComparer`1 is used to compare keys.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements of type TResult that are obtained by performing a grouped join on two sequences.\nouter: The first sequence to join.\ninner: The sequence to join to the first sequence.\nouterKeySelector: A function to extract the join key from each element of the first sequence.\ninnerKeySelector: A function to extract the join key from each element of the second sequence.\nresultSelector: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to hash and compare keys.The type of the elements of the first sequence.The type of the elements of the second sequence.The type of the keys returned by the key selector functions.The type of the result elements.\nSystem.ArgumentNullException: outer or inner or outerKeySelector or innerKeySelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'IndexOf(', 'abbr': 'IndexOf(Element item)', 'info': "No documentation", 'icase': 1, 'dup':1 })
add(words, {'word': 'Insert(', 'abbr': 'Insert(int index, Element item)', 'info': "No documentation", 'icase': 1, 'dup':1 })
add(words, {'word': 'Intersect(', 'abbr': 'Intersect(this IEnumerable<TSource> first, IEnumerable<TSource> second)', 'info': "Intersect(this IEnumerable<TSource> first, IEnumerable<TSource> second)\nProduces the set intersection of two sequences by using the default equality comparer to compare values.\nReturns: A sequence that contains the elements that form the set intersection of two sequences.\nfirst: An System.Collections.Generic.IEnumerable`1 whose distinct elements that also appear in second will be returned.\nsecond: An System.Collections.Generic.IEnumerable`1 whose distinct elements that also appear in the first sequence will be returned.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Intersect(', 'abbr': 'Intersect(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)', 'info': "Intersect(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\nProduces the set intersection of two sequences by using the specified System.Collections.Generic.IEqualityComparer`1 to compare values.\nReturns: A sequence that contains the elements that form the set intersection of two sequences.\nfirst: An System.Collections.Generic.IEnumerable`1 whose distinct elements that also appear in second will be returned.\nsecond: An System.Collections.Generic.IEnumerable`1 whose distinct elements that also appear in the first sequence will be returned.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare values.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'IsReadOnly', 'abbr': 'IsReadOnly', 'info': "No documentation", 'icase': 1, 'dup':1 })
add(words, {'word': 'Join(', 'abbr': 'Join(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)', 'info': "Join(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)\nCorrelates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.\nReturns: An System.Collections.Generic.IEnumerable`1 that has elements of type TResult that are obtained by performing an inner join on two sequences.\nouter: The first sequence to join.\ninner: The sequence to join to the first sequence.\nouterKeySelector: A function to extract the join key from each element of the first sequence.\ninnerKeySelector: A function to extract the join key from each element of the second sequence.\nresultSelector: A function to create a result element from two matching elements.The type of the elements of the first sequence.The type of the elements of the second sequence.The type of the keys returned by the key selector functions.The type of the result elements.\nSystem.ArgumentNullException: outer or inner or outerKeySelector or innerKeySelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Join(', 'abbr': 'Join(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer)', 'info': "Join(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer)\nCorrelates the elements of two sequences based on matching keys. A specified System.Collections.Generic.IEqualityComparer`1 is used to compare keys.\nReturns: An System.Collections.Generic.IEnumerable`1 that has elements of type TResult that are obtained by performing an inner join on two sequences.\nouter: The first sequence to join.\ninner: The sequence to join to the first sequence.\nouterKeySelector: A function to extract the join key from each element of the first sequence.\ninnerKeySelector: A function to extract the join key from each element of the second sequence.\nresultSelector: A function to create a result element from two matching elements.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to hash and compare keys.The type of the elements of the first sequence.The type of the elements of the second sequence.The type of the keys returned by the key selector functions.The type of the result elements.\nSystem.ArgumentNullException: outer or inner or outerKeySelector or innerKeySelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Last(', 'abbr': 'Last(this IEnumerable<TSource> source)', 'info': "Last(this IEnumerable<TSource> source)\nReturns the last element of a sequence.\nReturns: The value at the last position in the source sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to return the last element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.InvalidOperationException: The source sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Last(', 'abbr': 'Last(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "Last(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the last element of a sequence that satisfies a specified condition.\nReturns: The last element in the sequence that passes the test in the specified predicate function.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.\nSystem.InvalidOperationException: No element satisfies the condition in predicate.-or-The source sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'LastOrDefault(', 'abbr': 'LastOrDefault(this IEnumerable<TSource> source)', 'info': "LastOrDefault(this IEnumerable<TSource> source)\nReturns the last element of a sequence, or a default value if the sequence contains no elements.\nReturns: default(TSource) if the source sequence is empty; otherwise, the last element in the System.Collections.Generic.IEnumerable`1.\nsource: An System.Collections.Generic.IEnumerable`1 to return the last element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'LastOrDefault(', 'abbr': 'LastOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "LastOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the last element of a sequence that satisfies a condition or a default value if no such element is found.\nReturns: default(TSource) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'LongCount(', 'abbr': 'LongCount(this IEnumerable<TSource> source)', 'info': "LongCount(this IEnumerable<TSource> source)\nReturns an System.Int64 that represents the total number of elements in a sequence.\nReturns: The number of elements in the source sequence.\nsource: An System.Collections.Generic.IEnumerable`1 that contains the elements to be counted.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.OverflowException: The number of elements exceeds System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'LongCount(', 'abbr': 'LongCount(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "LongCount(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns an System.Int64 that represents how many elements in a sequence satisfy a condition.\nReturns: A number that represents how many elements in the sequence satisfy the condition in the predicate function.\nsource: An System.Collections.Generic.IEnumerable`1 that contains the elements to be counted.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.\nSystem.OverflowException: The number of matching elements exceeds System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source)', 'info': "Max(this IEnumerable<TSource> source)\nReturns the maximum value in a generic sequence.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)\nInvokes a transform function on each element of a sequence and returns the maximum nullable System.Decimal value.\nReturns: The value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, decimal> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, decimal> selector)\nInvokes a transform function on each element of a sequence and returns the maximum System.Decimal value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, double?> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, double?> selector)\nInvokes a transform function on each element of a sequence and returns the maximum nullable System.Double value.\nReturns: The value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, double> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, double> selector)\nInvokes a transform function on each element of a sequence and returns the maximum System.Double value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, float?> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, float?> selector)\nInvokes a transform function on each element of a sequence and returns the maximum nullable System.Single value.\nReturns: The value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, float> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, float> selector)\nInvokes a transform function on each element of a sequence and returns the maximum System.Single value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, int?> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, int?> selector)\nInvokes a transform function on each element of a sequence and returns the maximum nullable System.Int32 value.\nReturns: The value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, int> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, int> selector)\nInvokes a transform function on each element of a sequence and returns the maximum System.Int32 value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, long?> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, long?> selector)\nInvokes a transform function on each element of a sequence and returns the maximum nullable System.Int64 value.\nReturns: The value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, long> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, long> selector)\nInvokes a transform function on each element of a sequence and returns the maximum System.Int64 value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, TResult> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, TResult> selector)\nInvokes a transform function on each element of a generic sequence and returns the maximum resulting value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.The type of the value returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source)', 'info': "Min(this IEnumerable<TSource> source)\nReturns the minimum value in a generic sequence.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)\nInvokes a transform function on each element of a sequence and returns the minimum nullable System.Decimal value.\nReturns: The value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, decimal> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, decimal> selector)\nInvokes a transform function on each element of a sequence and returns the minimum System.Decimal value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, double?> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, double?> selector)\nInvokes a transform function on each element of a sequence and returns the minimum nullable System.Double value.\nReturns: The value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, double> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, double> selector)\nInvokes a transform function on each element of a sequence and returns the minimum System.Double value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, float?> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, float?> selector)\nInvokes a transform function on each element of a sequence and returns the minimum nullable System.Single value.\nReturns: The value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, float> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, float> selector)\nInvokes a transform function on each element of a sequence and returns the minimum System.Single value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, int?> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, int?> selector)\nInvokes a transform function on each element of a sequence and returns the minimum nullable System.Int32 value.\nReturns: The value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, int> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, int> selector)\nInvokes a transform function on each element of a sequence and returns the minimum System.Int32 value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, long?> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, long?> selector)\nInvokes a transform function on each element of a sequence and returns the minimum nullable System.Int64 value.\nReturns: The value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, long> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, long> selector)\nInvokes a transform function on each element of a sequence and returns the minimum System.Int64 value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, TResult> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, TResult> selector)\nInvokes a transform function on each element of a generic sequence and returns the minimum resulting value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.The type of the value returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OfType(', 'abbr': 'OfType(this IEnumerable source)', 'info': "OfType(this IEnumerable source)\nFilters the elements of an System.Collections.IEnumerable based on a specified type.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements from the input sequence of type TResult.\nsource: The System.Collections.IEnumerable whose elements to filter.The type to filter the elements of the sequence on.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OrderBy(', 'abbr': 'OrderBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)', 'info': "OrderBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\nSorts the elements of a sequence in ascending order according to a key.\nReturns: An System.Linq.IOrderedEnumerable`1 whose elements are sorted according to a key.\nsource: A sequence of values to order.\nkeySelector: A function to extract a key from an element.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OrderBy(', 'abbr': 'OrderBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)', 'info': "OrderBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)\nSorts the elements of a sequence in ascending order by using a specified comparer.\nReturns: An System.Linq.IOrderedEnumerable`1 whose elements are sorted according to a key.\nsource: A sequence of values to order.\nkeySelector: A function to extract a key from an element.\ncomparer: An System.Collections.Generic.IComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OrderByDescending(', 'abbr': 'OrderByDescending(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)', 'info': "OrderByDescending(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\nSorts the elements of a sequence in descending order according to a key.\nReturns: An System.Linq.IOrderedEnumerable`1 whose elements are sorted in descending order according to a key.\nsource: A sequence of values to order.\nkeySelector: A function to extract a key from an element.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OrderByDescending(', 'abbr': 'OrderByDescending(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)', 'info': "OrderByDescending(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)\nSorts the elements of a sequence in descending order by using a specified comparer.\nReturns: An System.Linq.IOrderedEnumerable`1 whose elements are sorted in descending order according to a key.\nsource: A sequence of values to order.\nkeySelector: A function to extract a key from an element.\ncomparer: An System.Collections.Generic.IComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Remove(', 'abbr': 'Remove(Element item)', 'info': "No documentation", 'icase': 1, 'dup':1 })
add(words, {'word': 'RemoveAt(', 'abbr': 'RemoveAt(int index)', 'info': "No documentation", 'icase': 1, 'dup':1 })
add(words, {'word': 'Reverse(', 'abbr': 'Reverse(this IEnumerable<TSource> source)', 'info': "Reverse(this IEnumerable<TSource> source)\nInverts the order of the elements in a sequence.\nReturns: A sequence whose elements correspond to those of the input sequence in reverse order.\nsource: A sequence of values to reverse.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Select(', 'abbr': 'Select(this IEnumerable<TSource> source, Func<TSource, int, TResult> selector)', 'info': "Select(this IEnumerable<TSource> source, Func<TSource, int, TResult> selector)\nProjects each element of a sequence into a new form by incorporating the element's index.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the transform function on each element of source.\nsource: A sequence of values to invoke a transform function on.\nselector: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.The type of the elements of source.The type of the value returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Select(', 'abbr': 'Select(this IEnumerable<TSource> source, Func<TSource, TResult> selector)', 'info': "Select(this IEnumerable<TSource> source, Func<TSource, TResult> selector)\nProjects each element of a sequence into a new form.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the transform function on each element of source.\nsource: A sequence of values to invoke a transform function on.\nselector: A transform function to apply to each element.The type of the elements of source.The type of the value returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SelectMany(', 'abbr': 'SelectMany(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)', 'info': "SelectMany(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)\nProjects each element of a sequence to an System.Collections.Generic.IEnumerable`1, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of source and then mapping each of those sequence elements and their corresponding source element to a result element.\nsource: A sequence of values to project.\ncollectionSelector: A transform function to apply to each element of the input sequence.\nresultSelector: A transform function to apply to each element of the intermediate sequence.The type of the elements of source.The type of the intermediate elements collected by collectionSelector.The type of the elements of the resulting sequence.\nSystem.ArgumentNullException: source or collectionSelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SelectMany(', 'abbr': 'SelectMany(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TResult>> selector)', 'info': "SelectMany(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TResult>> selector)\nProjects each element of a sequence to an System.Collections.Generic.IEnumerable`1 and flattens the resulting sequences into one sequence.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.\nsource: A sequence of values to project.\nselector: A transform function to apply to each element.The type of the elements of source.The type of the elements of the sequence returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SelectMany(', 'abbr': 'SelectMany(this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)', 'info': "SelectMany(this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)\nProjects each element of a sequence to an System.Collections.Generic.IEnumerable`1, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of source and then mapping each of those sequence elements and their corresponding source element to a result element.\nsource: A sequence of values to project.\ncollectionSelector: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.\nresultSelector: A transform function to apply to each element of the intermediate sequence.The type of the elements of source.The type of the intermediate elements collected by collectionSelector.The type of the elements of the resulting sequence.\nSystem.ArgumentNullException: source or collectionSelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SelectMany(', 'abbr': 'SelectMany(this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TResult>> selector)', 'info': "SelectMany(this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TResult>> selector)\nProjects each element of a sequence to an System.Collections.Generic.IEnumerable`1, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.\nsource: A sequence of values to project.\nselector: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.The type of the elements of source.The type of the elements of the sequence returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SequenceEqual(', 'abbr': 'SequenceEqual(this IEnumerable<TSource> first, IEnumerable<TSource> second)', 'info': "SequenceEqual(this IEnumerable<TSource> first, IEnumerable<TSource> second)\nDetermines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.\nReturns: true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.\nfirst: An System.Collections.Generic.IEnumerable`1 to compare to second.\nsecond: An System.Collections.Generic.IEnumerable`1 to compare to the first sequence.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SequenceEqual(', 'abbr': 'SequenceEqual(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)', 'info': "SequenceEqual(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\nDetermines whether two sequences are equal by comparing their elements by using a specified System.Collections.Generic.IEqualityComparer`1.\nReturns: true if the two source sequences are of equal length and their corresponding elements compare equal according to comparer; otherwise, false.\nfirst: An System.Collections.Generic.IEnumerable`1 to compare to second.\nsecond: An System.Collections.Generic.IEnumerable`1 to compare to the first sequence.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to use to compare elements.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Single(', 'abbr': 'Single(this IEnumerable<TSource> source)', 'info': "Single(this IEnumerable<TSource> source)\nReturns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.\nReturns: The single element of the input sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to return the single element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.InvalidOperationException: The input sequence contains more than one element.-or-The input sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Single(', 'abbr': 'Single(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "Single(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.\nReturns: The single element of the input sequence that satisfies a condition.\nsource: An System.Collections.Generic.IEnumerable`1 to return a single element from.\npredicate: A function to test an element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.\nSystem.InvalidOperationException: No element satisfies the condition in predicate.-or-More than one element satisfies the condition in predicate.-or-The source sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SingleOrDefault(', 'abbr': 'SingleOrDefault(this IEnumerable<TSource> source)', 'info': "SingleOrDefault(this IEnumerable<TSource> source)\nReturns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.\nReturns: The single element of the input sequence, or default(TSource) if the sequence contains no elements.\nsource: An System.Collections.Generic.IEnumerable`1 to return the single element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.InvalidOperationException: The input sequence contains more than one element.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SingleOrDefault(', 'abbr': 'SingleOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "SingleOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.\nReturns: The single element of the input sequence that satisfies the condition, or default(TSource) if no such element is found.\nsource: An System.Collections.Generic.IEnumerable`1 to return a single element from.\npredicate: A function to test an element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Skip(', 'abbr': 'Skip(this IEnumerable<TSource> source, int count)', 'info': "Skip(this IEnumerable<TSource> source, int count)\nBypasses a specified number of elements in a sequence and then returns the remaining elements.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements that occur after the specified index in the input sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to return elements from.\ncount: The number of elements to skip before returning the remaining elements.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SkipWhile(', 'abbr': 'SkipWhile(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "SkipWhile(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nBypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.\nsource: An System.Collections.Generic.IEnumerable`1 to return elements from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SkipWhile(', 'abbr': 'SkipWhile(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)', 'info': "SkipWhile(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)\nBypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.\nsource: An System.Collections.Generic.IEnumerable`1 to return elements from.\npredicate: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)\nComputes the sum of the sequence of nullable System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Decimal.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, decimal> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, decimal> selector)\nComputes the sum of the sequence of System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Decimal.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, double?> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, double?> selector)\nComputes the sum of the sequence of nullable System.Double values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, double> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, double> selector)\nComputes the sum of the sequence of System.Double values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, float?> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, float?> selector)\nComputes the sum of the sequence of nullable System.Single values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, float> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, float> selector)\nComputes the sum of the sequence of System.Single values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, int?> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, int?> selector)\nComputes the sum of the sequence of nullable System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Int32.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, int> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, int> selector)\nComputes the sum of the sequence of System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Int32.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, long?> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, long?> selector)\nComputes the sum of the sequence of nullable System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, long> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, long> selector)\nComputes the sum of the sequence of System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Take(', 'abbr': 'Take(this IEnumerable<TSource> source, int count)', 'info': "Take(this IEnumerable<TSource> source, int count)\nReturns a specified number of contiguous elements from the start of a sequence.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the specified number of elements from the start of the input sequence.\nsource: The sequence to return elements from.\ncount: The number of elements to return.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'TakeWhile(', 'abbr': 'TakeWhile(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "TakeWhile(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns elements from a sequence as long as a specified condition is true.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements from the input sequence that occur before the element at which the test no longer passes.\nsource: A sequence to return elements from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'TakeWhile(', 'abbr': 'TakeWhile(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)', 'info': "TakeWhile(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)\nReturns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements from the input sequence that occur before the element at which the test no longer passes.\nsource: The sequence to return elements from.\npredicate: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToArray(', 'abbr': 'ToArray(this IEnumerable<TSource> source)', 'info': "ToArray(this IEnumerable<TSource> source)\nCreates an array from a System.Collections.Generic.IEnumerable`1.\nReturns: An array that contains the elements from the input sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to create an array from.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToDictionary(', 'abbr': 'ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)', 'info': "ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\nCreates a System.Collections.Generic.Dictionary`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function.\nReturns: A System.Collections.Generic.Dictionary`2 that contains keys and values.\nsource: An System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.Dictionary`2 from.\nkeySelector: A function to extract a key from each element.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.-or-keySelector produces a key that is null.\nSystem.ArgumentException: keySelector produces duplicate keys for two elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToDictionary(', 'abbr': 'ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)', 'info': "ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)\nCreates a System.Collections.Generic.Dictionary`2 from an System.Collections.Generic.IEnumerable`1 according to specified key selector and element selector functions.\nReturns: A System.Collections.Generic.Dictionary`2 that contains values of type TElement selected from the input sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.Dictionary`2 from.\nkeySelector: A function to extract a key from each element.\nelementSelector: A transform function to produce a result element value from each element.The type of the elements of source.The type of the key returned by keySelector.The type of the value returned by elementSelector.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.-or-keySelector produces a key that is null.\nSystem.ArgumentException: keySelector produces duplicate keys for two elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToDictionary(', 'abbr': 'ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)', 'info': "ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)\nCreates a System.Collections.Generic.Dictionary`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function, a comparer, and an element selector function.\nReturns: A System.Collections.Generic.Dictionary`2 that contains values of type TElement selected from the input sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.Dictionary`2 from.\nkeySelector: A function to extract a key from each element.\nelementSelector: A transform function to produce a result element value from each element.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.The type of the value returned by elementSelector.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.-or-keySelector produces a key that is null.\nSystem.ArgumentException: keySelector produces duplicate keys for two elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToDictionary(', 'abbr': 'ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)', 'info': "ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)\nCreates a System.Collections.Generic.Dictionary`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function and key comparer.\nReturns: A System.Collections.Generic.Dictionary`2 that contains keys and values.\nsource: An System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.Dictionary`2 from.\nkeySelector: A function to extract a key from each element.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the keys returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.-or-keySelector produces a key that is null.\nSystem.ArgumentException: keySelector produces duplicate keys for two elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToList(', 'abbr': 'ToList(this IEnumerable<TSource> source)', 'info': "ToList(this IEnumerable<TSource> source)\nCreates a System.Collections.Generic.List`1 from an System.Collections.Generic.IEnumerable`1.\nReturns: A System.Collections.Generic.List`1 that contains elements from the input sequence.\nsource: The System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.List`1 from.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToLookup(', 'abbr': 'ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)', 'info': "ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\nCreates a System.Linq.Lookup`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function.\nReturns: A System.Linq.Lookup`2 that contains keys and values.\nsource: The System.Collections.Generic.IEnumerable`1 to create a System.Linq.Lookup`2 from.\nkeySelector: A function to extract a key from each element.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToLookup(', 'abbr': 'ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)', 'info': "ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)\nCreates a System.Linq.Lookup`2 from an System.Collections.Generic.IEnumerable`1 according to specified key selector and element selector functions.\nReturns: A System.Linq.Lookup`2 that contains values of type TElement selected from the input sequence.\nsource: The System.Collections.Generic.IEnumerable`1 to create a System.Linq.Lookup`2 from.\nkeySelector: A function to extract a key from each element.\nelementSelector: A transform function to produce a result element value from each element.The type of the elements of source.The type of the key returned by keySelector.The type of the value returned by elementSelector.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToLookup(', 'abbr': 'ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)', 'info': "ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)\nCreates a System.Linq.Lookup`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function, a comparer and an element selector function.\nReturns: A System.Linq.Lookup`2 that contains values of type TElement selected from the input sequence.\nsource: The System.Collections.Generic.IEnumerable`1 to create a System.Linq.Lookup`2 from.\nkeySelector: A function to extract a key from each element.\nelementSelector: A transform function to produce a result element value from each element.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.The type of the value returned by elementSelector.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToLookup(', 'abbr': 'ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)', 'info': "ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)\nCreates a System.Linq.Lookup`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function and key comparer.\nReturns: A System.Linq.Lookup`2 that contains keys and values.\nsource: The System.Collections.Generic.IEnumerable`1 to create a System.Linq.Lookup`2 from.\nkeySelector: A function to extract a key from each element.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToString()', 'abbr': 'ToString()', 'info': "ToString()\nReturns a string that represents the current object.\nReturns: A string that represents the current object.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Union(', 'abbr': 'Union(this IEnumerable<TSource> first, IEnumerable<TSource> second)', 'info': "Union(this IEnumerable<TSource> first, IEnumerable<TSource> second)\nProduces the set union of two sequences by using the default equality comparer.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements from both input sequences, excluding duplicates.\nfirst: An System.Collections.Generic.IEnumerable`1 whose distinct elements form the first set for the union.\nsecond: An System.Collections.Generic.IEnumerable`1 whose distinct elements form the second set for the union.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Union(', 'abbr': 'Union(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)', 'info': "Union(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\nProduces the set union of two sequences by using a specified System.Collections.Generic.IEqualityComparer`1.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements from both input sequences, excluding duplicates.\nfirst: An System.Collections.Generic.IEnumerable`1 whose distinct elements form the first set for the union.\nsecond: An System.Collections.Generic.IEnumerable`1 whose distinct elements form the second set for the union.\ncomparer: The System.Collections.Generic.IEqualityComparer`1 to compare values.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Where(', 'abbr': 'Where(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "Where(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nFilters a sequence of values based on a predicate.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements from the input sequence that satisfy the condition.\nsource: An System.Collections.Generic.IEnumerable`1 to filter.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Where(', 'abbr': 'Where(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)', 'info': "Where(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)\nFilters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements from the input sequence that satisfy the condition.\nsource: An System.Collections.Generic.IEnumerable`1 to filter.\npredicate: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Zip(', 'abbr': 'Zip(this IEnumerable<TFirst> first, IEnumerable<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)', 'info': "Zip(this IEnumerable<TFirst> first, IEnumerable<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)\nApplies a specified function to the corresponding elements of two sequences, producing a sequence of the results.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements of the two input sequences, combined by resultSelector.\nfirst: The first input sequence.\nsecond: The second input sequence.\nresultSelector: A function that specifies how to combine the corresponding elements of the two sequences.The type of the elements of the first input sequence.The type of the elements of the second input sequence.The type of the elements of the result sequence.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Aggregate(', 'abbr': 'Aggregate(this IEnumerable<TSource> source, Func<TSource, TSource, TSource> func)', 'info': "Aggregate(this IEnumerable<TSource> source, Func<TSource, TSource, TSource> func)\nApplies an accumulator function over a sequence.\nReturns: The final accumulator value.\nsource: An System.Collections.Generic.IEnumerable`1 to aggregate over.\nfunc: An accumulator function to be invoked on each element.The type of the elements of source.\nSystem.ArgumentNullException: source or func is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Aggregate(', 'abbr': 'Aggregate(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func)', 'info': "Aggregate(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func)\nApplies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.\nReturns: The final accumulator value.\nsource: An System.Collections.Generic.IEnumerable`1 to aggregate over.\nseed: The initial accumulator value.\nfunc: An accumulator function to be invoked on each element.The type of the elements of source.The type of the accumulator value.\nSystem.ArgumentNullException: source or func is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Aggregate(', 'abbr': 'Aggregate(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)', 'info': "Aggregate(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)\nApplies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.\nReturns: The transformed final accumulator value.\nsource: An System.Collections.Generic.IEnumerable`1 to aggregate over.\nseed: The initial accumulator value.\nfunc: An accumulator function to be invoked on each element.\nresultSelector: A function to transform the final accumulator value into the result value.The type of the elements of source.The type of the accumulator value.The type of the resulting value.\nSystem.ArgumentNullException: source or func or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'All(', 'abbr': 'All(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "All(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nDetermines whether all elements of a sequence satisfy a condition.\nReturns: true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false.\nsource: An System.Collections.Generic.IEnumerable`1 that contains the elements to apply the predicate to.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Any(', 'abbr': 'Any(this IEnumerable<TSource> source)', 'info': "Any(this IEnumerable<TSource> source)\nDetermines whether a sequence contains any elements.\nReturns: true if the source sequence contains any elements; otherwise, false.\nsource: The System.Collections.Generic.IEnumerable`1 to check for emptiness.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Any(', 'abbr': 'Any(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "Any(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nDetermines whether any element of a sequence satisfies a condition.\nReturns: true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to apply the predicate to.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'AsEnumerable(', 'abbr': 'AsEnumerable(this IEnumerable<TSource> source)', 'info': "AsEnumerable(this IEnumerable<TSource> source)\nReturns the input typed as System.Collections.Generic.IEnumerable`1.\nReturns: The input sequence typed as System.Collections.Generic.IEnumerable`1.\nsource: The sequence to type as System.Collections.Generic.IEnumerable`1.The type of the elements of source.", 'icase': 1, 'dup':1 })
add(words, {'word': 'AsParallel(', 'abbr': 'AsParallel(this IEnumerable source)', 'info': "AsParallel(this IEnumerable source)\nEnables parallelization of a query.\nReturns: The source as a ParallelQuery to bind to ParallelEnumerable extension methods.\nsource: An System.Collections.Generic.IEnumerable to convert to a System.Linq.ParallelQuery.\nSystem.ArgumentNullException: source is a null reference (Nothing in Visual Basic).", 'icase': 1, 'dup':1 })
add(words, {'word': 'AsParallel(', 'abbr': 'AsParallel(this IEnumerable<TSource> source)', 'info': "AsParallel(this IEnumerable<TSource> source)\nEnables parallelization of a query.\nReturns: The source as a System.Linq.ParallelQuery`1 to bind to ParallelEnumerable extension methods.\nsource: An System.Collections.Generic.IEnumerable`1 to convert to a System.Linq.ParallelQuery`1.The type of elements of source.\nSystem.ArgumentNullException: source is a null reference (Nothing in Visual Basic).", 'icase': 1, 'dup':1 })
add(words, {'word': 'AsQueryable(', 'abbr': 'AsQueryable(this IEnumerable source)', 'info': "AsQueryable(this IEnumerable source)\nConverts an System.Collections.IEnumerable to an System.Linq.IQueryable.\nReturns: An System.Linq.IQueryable that represents the input sequence.\nsource: A sequence to convert.\nSystem.ArgumentException: source does not implement System.Collections.Generic.IEnumerable`1 for some T.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'AsQueryable(', 'abbr': 'AsQueryable(this IEnumerable<TElement> source)', 'info': "AsQueryable(this IEnumerable<TElement> source)\nConverts a generic System.Collections.Generic.IEnumerable`1 to a generic System.Linq.IQueryable`1.\nReturns: An System.Linq.IQueryable`1 that represents the input sequence.\nsource: A sequence to convert.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)\nComputes the average of a sequence of nullable System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum of the elements in the sequence is larger than System.Decimal.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, decimal> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, decimal> selector)\nComputes the average of a sequence of System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values.\nsource: A sequence of values that are used to calculate an average.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.\nSystem.OverflowException: The sum of the elements in the sequence is larger than System.Decimal.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, double?> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, double?> selector)\nComputes the average of a sequence of nullable System.Double values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, double> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, double> selector)\nComputes the average of a sequence of System.Double values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, float?> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, float?> selector)\nComputes the average of a sequence of nullable System.Single values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, float> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, float> selector)\nComputes the average of a sequence of System.Single values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, int?> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, int?> selector)\nComputes the average of a sequence of nullable System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum of the elements in the sequence is larger than System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, int> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, int> selector)\nComputes the average of a sequence of System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.\nSystem.OverflowException: The sum of the elements in the sequence is larger than System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, long?> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, long?> selector)\nComputes the average of a sequence of nullable System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, long> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, long> selector)\nComputes the average of a sequence of System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.\nSystem.OverflowException: The sum of the elements in the sequence is larger than System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Cast(', 'abbr': 'Cast(this IEnumerable source)', 'info': "Cast(this IEnumerable source)\nCasts the elements of an System.Collections.IEnumerable to the specified type.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains each element of the source sequence cast to the specified type.\nsource: The System.Collections.IEnumerable that contains the elements to be cast to type TResult.The type to cast the elements of source to.\nSystem.ArgumentNullException: source is null.\nSystem.InvalidCastException: An element in the sequence cannot be cast to type TResult.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Concat(', 'abbr': 'Concat(this IEnumerable<TSource> first, IEnumerable<TSource> second)', 'info': "Concat(this IEnumerable<TSource> first, IEnumerable<TSource> second)\nConcatenates two sequences.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the concatenated elements of the two input sequences.\nfirst: The first sequence to concatenate.\nsecond: The sequence to concatenate to the first sequence.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ContainedInDesignOption(', 'abbr': 'ContainedInDesignOption(ElementId designOptionId)', 'info': "ContainedInDesignOption(ElementId designOptionId)", 'icase': 1, 'dup':1 })
add(words, {'word': 'Contains(', 'abbr': 'Contains(this IEnumerable<TSource> source, TSource value)', 'info': "Contains(this IEnumerable<TSource> source, TSource value)\nDetermines whether a sequence contains a specified element by using the default equality comparer.\nReturns: true if the source sequence contains an element that has the specified value; otherwise, false.\nsource: A sequence in which to locate a value.\nvalue: The value to locate in the sequence.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Contains(', 'abbr': 'Contains(this IEnumerable<TSource> source, TSource value, IEqualityComparer<TSource> comparer)', 'info': "Contains(this IEnumerable<TSource> source, TSource value, IEqualityComparer<TSource> comparer)\nDetermines whether a sequence contains a specified element by using a specified System.Collections.Generic.IEqualityComparer`1.\nReturns: true if the source sequence contains an element that has the specified value; otherwise, false.\nsource: A sequence in which to locate a value.\nvalue: The value to locate in the sequence.\ncomparer: An equality comparer to compare values.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Count(', 'abbr': 'Count(this IEnumerable<TSource> source)', 'info': "Count(this IEnumerable<TSource> source)\nReturns the number of elements in a sequence.\nReturns: The number of elements in the input sequence.\nsource: A sequence that contains elements to be counted.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.OverflowException: The number of elements in source is larger than System.Int32.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Count(', 'abbr': 'Count(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "Count(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns a number that represents how many elements in the specified sequence satisfy a condition.\nReturns: A number that represents how many elements in the sequence satisfy the condition in the predicate function.\nsource: A sequence that contains elements to be tested and counted.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.\nSystem.OverflowException: The number of elements in source is larger than System.Int32.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'DefaultIfEmpty(', 'abbr': 'DefaultIfEmpty(this IEnumerable<TSource> source)', 'info': "DefaultIfEmpty(this IEnumerable<TSource> source)\nReturns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.\nReturns: An System.Collections.Generic.IEnumerable`1 object that contains the default value for the TSource type if source is empty; otherwise, source.\nsource: The sequence to return a default value for if it is empty.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'DefaultIfEmpty(', 'abbr': 'DefaultIfEmpty(this IEnumerable<TSource> source, TSource defaultValue)', 'info': "DefaultIfEmpty(this IEnumerable<TSource> source, TSource defaultValue)\nReturns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains defaultValue if source is empty; otherwise, source.\nsource: The sequence to return the specified value for if it is empty.\ndefaultValue: The value to return if the sequence is empty.The type of the elements of source.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Dispose()', 'abbr': 'Dispose()', 'info': "Dispose()", 'icase': 1, 'dup':1 })
add(words, {'word': 'Distinct(', 'abbr': 'Distinct(this IEnumerable<TSource> source)', 'info': "Distinct(this IEnumerable<TSource> source)\nReturns distinct elements from a sequence by using the default equality comparer to compare values.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains distinct elements from the source sequence.\nsource: The sequence to remove duplicate elements from.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Distinct(', 'abbr': 'Distinct(this IEnumerable<TSource> source, IEqualityComparer<TSource> comparer)', 'info': "Distinct(this IEnumerable<TSource> source, IEqualityComparer<TSource> comparer)\nReturns distinct elements from a sequence by using a specified System.Collections.Generic.IEqualityComparer`1 to compare values.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains distinct elements from the source sequence.\nsource: The sequence to remove duplicate elements from.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare values.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ElementAt(', 'abbr': 'ElementAt(this IEnumerable<TSource> source, int index)', 'info': "ElementAt(this IEnumerable<TSource> source, int index)\nReturns the element at a specified index in a sequence.\nReturns: The element at the specified position in the source sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\nindex: The zero-based index of the element to retrieve.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.ArgumentOutOfRangeException: index is less than 0 or greater than or equal to the number of elements in source.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ElementAtOrDefault(', 'abbr': 'ElementAtOrDefault(this IEnumerable<TSource> source, int index)', 'info': "ElementAtOrDefault(this IEnumerable<TSource> source, int index)\nReturns the element at a specified index in a sequence or a default value if the index is out of range.\nReturns: default(TSource) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\nindex: The zero-based index of the element to retrieve.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Equals(', 'abbr': 'Equals(object obj)', 'info': "Equals(object obj)\nDetermines whether the specified System.Object is equal to the current System.Object.\nReturns: true if the specified System.Object is equal to the current System.Object; otherwise, false.\nobj: The object to compare with the current object. ", 'icase': 1, 'dup':1 })
add(words, {'word': 'Except(', 'abbr': 'Except(this IEnumerable<TSource> first, IEnumerable<TSource> second)', 'info': "Except(this IEnumerable<TSource> first, IEnumerable<TSource> second)\nProduces the set difference of two sequences by using the default equality comparer to compare values.\nReturns: A sequence that contains the set difference of the elements of two sequences.\nfirst: An System.Collections.Generic.IEnumerable`1 whose elements that are not also in second will be returned.\nsecond: An System.Collections.Generic.IEnumerable`1 whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Except(', 'abbr': 'Except(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)', 'info': "Except(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\nProduces the set difference of two sequences by using the specified System.Collections.Generic.IEqualityComparer`1 to compare values.\nReturns: A sequence that contains the set difference of the elements of two sequences.\nfirst: An System.Collections.Generic.IEnumerable`1 whose elements that are not also in second will be returned.\nsecond: An System.Collections.Generic.IEnumerable`1 whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare values.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Excluding(', 'abbr': 'Excluding(ICollection<ElementId> idsToExclude)', 'info': "Excluding(ICollection<ElementId> idsToExclude)", 'icase': 1, 'dup':1 })
add(words, {'word': 'First(', 'abbr': 'First(this IEnumerable<TSource> source)', 'info': "First(this IEnumerable<TSource> source)\nReturns the first element of a sequence.\nReturns: The first element in the specified sequence.\nsource: The System.Collections.Generic.IEnumerable`1 to return the first element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.InvalidOperationException: The source sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'First(', 'abbr': 'First(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "First(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the first element in a sequence that satisfies a specified condition.\nReturns: The first element in the sequence that passes the test in the specified predicate function.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.\nSystem.InvalidOperationException: No element satisfies the condition in predicate.-or-The source sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'FirstElement()', 'abbr': 'FirstElement()', 'info': "FirstElement()", 'icase': 1, 'dup':1 })
add(words, {'word': 'FirstElementId()', 'abbr': 'FirstElementId()', 'info': "FirstElementId()", 'icase': 1, 'dup':1 })
add(words, {'word': 'FirstOrDefault(', 'abbr': 'FirstOrDefault(this IEnumerable<TSource> source)', 'info': "FirstOrDefault(this IEnumerable<TSource> source)\nReturns the first element of a sequence, or a default value if the sequence contains no elements.\nReturns: default(TSource) if source is empty; otherwise, the first element in source.\nsource: The System.Collections.Generic.IEnumerable`1 to return the first element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'FirstOrDefault(', 'abbr': 'FirstOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "FirstOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the first element of the sequence that satisfies a condition or a default value if no such element is found.\nReturns: default(TSource) if source is empty or if no element passes the test specified by predicate; otherwise, the first element in source that passes the test specified by predicate.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GetElementIdIterator()', 'abbr': 'GetElementIdIterator()', 'info': "GetElementIdIterator()", 'icase': 1, 'dup':1 })
add(words, {'word': 'GetElementIterator()', 'abbr': 'GetElementIterator()', 'info': "GetElementIterator()", 'icase': 1, 'dup':1 })
add(words, {'word': 'GetEnumerator()', 'abbr': 'GetEnumerator()', 'info': "GetEnumerator()", 'icase': 1, 'dup':1 })
add(words, {'word': 'GetHashCode()', 'abbr': 'GetHashCode()', 'info': "GetHashCode()\nServes as a hash function for a particular type. \nReturns: A hash code for the current System.Object.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GetType()', 'abbr': 'GetType()', 'info': "GetType()\nGets the System.Type of the current instance.\nReturns: The exact runtime type of the current instance.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\nGroups the elements of a sequence according to a specified key selector function.\nReturns: An IEnumerable<IGrouping<TKey, TSource>> in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each System.Linq.IGrouping`2 object contains a sequence of objects and a key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector)\nGroups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.\nReturns: A collection of elements of type TResult where each element represents a projection over a group and its key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nresultSelector: A function to create a result value from each group.The type of the elements of source.The type of the key returned by keySelector.The type of the result value returned by resultSelector.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector, IEqualityComparer<TKey> comparer)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector, IEqualityComparer<TKey> comparer)\nGroups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.\nReturns: A collection of elements of type TResult where each element represents a projection over a group and its key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nresultSelector: A function to create a result value from each group.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys with.The type of the elements of source.The type of the key returned by keySelector.The type of the result value returned by resultSelector.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)\nGroups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.\nReturns: An IEnumerable<IGrouping<TKey, TElement>> in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each System.Linq.IGrouping`2 object contains a collection of objects of type TElement and a key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nelementSelector: A function to map each source element to an element in the System.Linq.IGrouping`2.The type of the elements of source.The type of the key returned by keySelector.The type of the elements in the System.Linq.IGrouping`2.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector)\nGroups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.\nReturns: A collection of elements of type TResult where each element represents a projection over a group and its key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nelementSelector: A function to map each source element to an element in an System.Linq.IGrouping`2.\nresultSelector: A function to create a result value from each group.The type of the elements of source.The type of the key returned by keySelector.The type of the elements in each System.Linq.IGrouping`2.The type of the result value returned by resultSelector.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector, IEqualityComparer<TKey> comparer)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector, IEqualityComparer<TKey> comparer)\nGroups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.\nReturns: A collection of elements of type TResult where each element represents a projection over a group and its key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nelementSelector: A function to map each source element to an element in an System.Linq.IGrouping`2.\nresultSelector: A function to create a result value from each group.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys with.The type of the elements of source.The type of the key returned by keySelector.The type of the elements in each System.Linq.IGrouping`2.The type of the result value returned by resultSelector.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)\nGroups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.\nReturns: An IEnumerable<IGrouping<TKey, TElement>> in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each System.Linq.IGrouping`2 object contains a collection of objects of type TElement and a key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nelementSelector: A function to map each source element to an element in an System.Linq.IGrouping`2.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.The type of the elements in the System.Linq.IGrouping`2.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)\nGroups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.\nReturns: An IEnumerable<IGrouping<TKey, TSource>> in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each System.Linq.IGrouping`2 object contains a collection of objects and a key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupJoin(', 'abbr': 'GroupJoin(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector)', 'info': "GroupJoin(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector)\nCorrelates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements of type TResult that are obtained by performing a grouped join on two sequences.\nouter: The first sequence to join.\ninner: The sequence to join to the first sequence.\nouterKeySelector: A function to extract the join key from each element of the first sequence.\ninnerKeySelector: A function to extract the join key from each element of the second sequence.\nresultSelector: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.The type of the elements of the first sequence.The type of the elements of the second sequence.The type of the keys returned by the key selector functions.The type of the result elements.\nSystem.ArgumentNullException: outer or inner or outerKeySelector or innerKeySelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupJoin(', 'abbr': 'GroupJoin(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector, IEqualityComparer<TKey> comparer)', 'info': "GroupJoin(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector, IEqualityComparer<TKey> comparer)\nCorrelates the elements of two sequences based on key equality and groups the results. A specified System.Collections.Generic.IEqualityComparer`1 is used to compare keys.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements of type TResult that are obtained by performing a grouped join on two sequences.\nouter: The first sequence to join.\ninner: The sequence to join to the first sequence.\nouterKeySelector: A function to extract the join key from each element of the first sequence.\ninnerKeySelector: A function to extract the join key from each element of the second sequence.\nresultSelector: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to hash and compare keys.The type of the elements of the first sequence.The type of the elements of the second sequence.The type of the keys returned by the key selector functions.The type of the result elements.\nSystem.ArgumentNullException: outer or inner or outerKeySelector or innerKeySelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Intersect(', 'abbr': 'Intersect(this IEnumerable<TSource> first, IEnumerable<TSource> second)', 'info': "Intersect(this IEnumerable<TSource> first, IEnumerable<TSource> second)\nProduces the set intersection of two sequences by using the default equality comparer to compare values.\nReturns: A sequence that contains the elements that form the set intersection of two sequences.\nfirst: An System.Collections.Generic.IEnumerable`1 whose distinct elements that also appear in second will be returned.\nsecond: An System.Collections.Generic.IEnumerable`1 whose distinct elements that also appear in the first sequence will be returned.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Intersect(', 'abbr': 'Intersect(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)', 'info': "Intersect(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\nProduces the set intersection of two sequences by using the specified System.Collections.Generic.IEqualityComparer`1 to compare values.\nReturns: A sequence that contains the elements that form the set intersection of two sequences.\nfirst: An System.Collections.Generic.IEnumerable`1 whose distinct elements that also appear in second will be returned.\nsecond: An System.Collections.Generic.IEnumerable`1 whose distinct elements that also appear in the first sequence will be returned.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare values.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'IntersectWith(', 'abbr': 'IntersectWith(FilteredElementCollector other)', 'info': "IntersectWith(FilteredElementCollector other)", 'icase': 1, 'dup':1 })
add(words, {'word': 'Join(', 'abbr': 'Join(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)', 'info': "Join(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)\nCorrelates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.\nReturns: An System.Collections.Generic.IEnumerable`1 that has elements of type TResult that are obtained by performing an inner join on two sequences.\nouter: The first sequence to join.\ninner: The sequence to join to the first sequence.\nouterKeySelector: A function to extract the join key from each element of the first sequence.\ninnerKeySelector: A function to extract the join key from each element of the second sequence.\nresultSelector: A function to create a result element from two matching elements.The type of the elements of the first sequence.The type of the elements of the second sequence.The type of the keys returned by the key selector functions.The type of the result elements.\nSystem.ArgumentNullException: outer or inner or outerKeySelector or innerKeySelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Join(', 'abbr': 'Join(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer)', 'info': "Join(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer)\nCorrelates the elements of two sequences based on matching keys. A specified System.Collections.Generic.IEqualityComparer`1 is used to compare keys.\nReturns: An System.Collections.Generic.IEnumerable`1 that has elements of type TResult that are obtained by performing an inner join on two sequences.\nouter: The first sequence to join.\ninner: The sequence to join to the first sequence.\nouterKeySelector: A function to extract the join key from each element of the first sequence.\ninnerKeySelector: A function to extract the join key from each element of the second sequence.\nresultSelector: A function to create a result element from two matching elements.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to hash and compare keys.The type of the elements of the first sequence.The type of the elements of the second sequence.The type of the keys returned by the key selector functions.The type of the result elements.\nSystem.ArgumentNullException: outer or inner or outerKeySelector or innerKeySelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Last(', 'abbr': 'Last(this IEnumerable<TSource> source)', 'info': "Last(this IEnumerable<TSource> source)\nReturns the last element of a sequence.\nReturns: The value at the last position in the source sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to return the last element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.InvalidOperationException: The source sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Last(', 'abbr': 'Last(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "Last(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the last element of a sequence that satisfies a specified condition.\nReturns: The last element in the sequence that passes the test in the specified predicate function.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.\nSystem.InvalidOperationException: No element satisfies the condition in predicate.-or-The source sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'LastOrDefault(', 'abbr': 'LastOrDefault(this IEnumerable<TSource> source)', 'info': "LastOrDefault(this IEnumerable<TSource> source)\nReturns the last element of a sequence, or a default value if the sequence contains no elements.\nReturns: default(TSource) if the source sequence is empty; otherwise, the last element in the System.Collections.Generic.IEnumerable`1.\nsource: An System.Collections.Generic.IEnumerable`1 to return the last element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'LastOrDefault(', 'abbr': 'LastOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "LastOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the last element of a sequence that satisfies a condition or a default value if no such element is found.\nReturns: default(TSource) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'LongCount(', 'abbr': 'LongCount(this IEnumerable<TSource> source)', 'info': "LongCount(this IEnumerable<TSource> source)\nReturns an System.Int64 that represents the total number of elements in a sequence.\nReturns: The number of elements in the source sequence.\nsource: An System.Collections.Generic.IEnumerable`1 that contains the elements to be counted.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.OverflowException: The number of elements exceeds System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'LongCount(', 'abbr': 'LongCount(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "LongCount(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns an System.Int64 that represents how many elements in a sequence satisfy a condition.\nReturns: A number that represents how many elements in the sequence satisfy the condition in the predicate function.\nsource: An System.Collections.Generic.IEnumerable`1 that contains the elements to be counted.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.\nSystem.OverflowException: The number of matching elements exceeds System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source)', 'info': "Max(this IEnumerable<TSource> source)\nReturns the maximum value in a generic sequence.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)\nInvokes a transform function on each element of a sequence and returns the maximum nullable System.Decimal value.\nReturns: The value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, decimal> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, decimal> selector)\nInvokes a transform function on each element of a sequence and returns the maximum System.Decimal value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, double?> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, double?> selector)\nInvokes a transform function on each element of a sequence and returns the maximum nullable System.Double value.\nReturns: The value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, double> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, double> selector)\nInvokes a transform function on each element of a sequence and returns the maximum System.Double value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, float?> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, float?> selector)\nInvokes a transform function on each element of a sequence and returns the maximum nullable System.Single value.\nReturns: The value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, float> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, float> selector)\nInvokes a transform function on each element of a sequence and returns the maximum System.Single value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, int?> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, int?> selector)\nInvokes a transform function on each element of a sequence and returns the maximum nullable System.Int32 value.\nReturns: The value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, int> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, int> selector)\nInvokes a transform function on each element of a sequence and returns the maximum System.Int32 value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, long?> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, long?> selector)\nInvokes a transform function on each element of a sequence and returns the maximum nullable System.Int64 value.\nReturns: The value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, long> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, long> selector)\nInvokes a transform function on each element of a sequence and returns the maximum System.Int64 value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, TResult> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, TResult> selector)\nInvokes a transform function on each element of a generic sequence and returns the maximum resulting value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.The type of the value returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source)', 'info': "Min(this IEnumerable<TSource> source)\nReturns the minimum value in a generic sequence.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)\nInvokes a transform function on each element of a sequence and returns the minimum nullable System.Decimal value.\nReturns: The value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, decimal> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, decimal> selector)\nInvokes a transform function on each element of a sequence and returns the minimum System.Decimal value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, double?> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, double?> selector)\nInvokes a transform function on each element of a sequence and returns the minimum nullable System.Double value.\nReturns: The value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, double> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, double> selector)\nInvokes a transform function on each element of a sequence and returns the minimum System.Double value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, float?> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, float?> selector)\nInvokes a transform function on each element of a sequence and returns the minimum nullable System.Single value.\nReturns: The value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, float> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, float> selector)\nInvokes a transform function on each element of a sequence and returns the minimum System.Single value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, int?> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, int?> selector)\nInvokes a transform function on each element of a sequence and returns the minimum nullable System.Int32 value.\nReturns: The value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, int> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, int> selector)\nInvokes a transform function on each element of a sequence and returns the minimum System.Int32 value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, long?> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, long?> selector)\nInvokes a transform function on each element of a sequence and returns the minimum nullable System.Int64 value.\nReturns: The value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, long> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, long> selector)\nInvokes a transform function on each element of a sequence and returns the minimum System.Int64 value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, TResult> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, TResult> selector)\nInvokes a transform function on each element of a generic sequence and returns the minimum resulting value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.The type of the value returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OfCategory(', 'abbr': 'OfCategory(BuiltInCategory category)', 'info': "OfCategory(BuiltInCategory category)", 'icase': 1, 'dup':1 })
add(words, {'word': 'OfCategoryId(', 'abbr': 'OfCategoryId(ElementId categoryId)', 'info': "OfCategoryId(ElementId categoryId)", 'icase': 1, 'dup':1 })
add(words, {'word': 'OfClass(', 'abbr': 'OfClass(Type type)', 'info': "OfClass(Type type)", 'icase': 1, 'dup':1 })
add(words, {'word': 'OfType(', 'abbr': 'OfType(this IEnumerable source)', 'info': "OfType(this IEnumerable source)\nFilters the elements of an System.Collections.IEnumerable based on a specified type.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements from the input sequence of type TResult.\nsource: The System.Collections.IEnumerable whose elements to filter.The type to filter the elements of the sequence on.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OrderBy(', 'abbr': 'OrderBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)', 'info': "OrderBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\nSorts the elements of a sequence in ascending order according to a key.\nReturns: An System.Linq.IOrderedEnumerable`1 whose elements are sorted according to a key.\nsource: A sequence of values to order.\nkeySelector: A function to extract a key from an element.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OrderBy(', 'abbr': 'OrderBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)', 'info': "OrderBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)\nSorts the elements of a sequence in ascending order by using a specified comparer.\nReturns: An System.Linq.IOrderedEnumerable`1 whose elements are sorted according to a key.\nsource: A sequence of values to order.\nkeySelector: A function to extract a key from an element.\ncomparer: An System.Collections.Generic.IComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OrderByDescending(', 'abbr': 'OrderByDescending(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)', 'info': "OrderByDescending(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\nSorts the elements of a sequence in descending order according to a key.\nReturns: An System.Linq.IOrderedEnumerable`1 whose elements are sorted in descending order according to a key.\nsource: A sequence of values to order.\nkeySelector: A function to extract a key from an element.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OrderByDescending(', 'abbr': 'OrderByDescending(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)', 'info': "OrderByDescending(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)\nSorts the elements of a sequence in descending order by using a specified comparer.\nReturns: An System.Linq.IOrderedEnumerable`1 whose elements are sorted in descending order according to a key.\nsource: A sequence of values to order.\nkeySelector: A function to extract a key from an element.\ncomparer: An System.Collections.Generic.IComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OwnedByView(', 'abbr': 'OwnedByView(ElementId viewId)', 'info': "OwnedByView(ElementId viewId)", 'icase': 1, 'dup':1 })
add(words, {'word': 'Reverse(', 'abbr': 'Reverse(this IEnumerable<TSource> source)', 'info': "Reverse(this IEnumerable<TSource> source)\nInverts the order of the elements in a sequence.\nReturns: A sequence whose elements correspond to those of the input sequence in reverse order.\nsource: A sequence of values to reverse.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Select(', 'abbr': 'Select(this IEnumerable<TSource> source, Func<TSource, int, TResult> selector)', 'info': "Select(this IEnumerable<TSource> source, Func<TSource, int, TResult> selector)\nProjects each element of a sequence into a new form by incorporating the element's index.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the transform function on each element of source.\nsource: A sequence of values to invoke a transform function on.\nselector: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.The type of the elements of source.The type of the value returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Select(', 'abbr': 'Select(this IEnumerable<TSource> source, Func<TSource, TResult> selector)', 'info': "Select(this IEnumerable<TSource> source, Func<TSource, TResult> selector)\nProjects each element of a sequence into a new form.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the transform function on each element of source.\nsource: A sequence of values to invoke a transform function on.\nselector: A transform function to apply to each element.The type of the elements of source.The type of the value returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SelectMany(', 'abbr': 'SelectMany(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)', 'info': "SelectMany(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)\nProjects each element of a sequence to an System.Collections.Generic.IEnumerable`1, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of source and then mapping each of those sequence elements and their corresponding source element to a result element.\nsource: A sequence of values to project.\ncollectionSelector: A transform function to apply to each element of the input sequence.\nresultSelector: A transform function to apply to each element of the intermediate sequence.The type of the elements of source.The type of the intermediate elements collected by collectionSelector.The type of the elements of the resulting sequence.\nSystem.ArgumentNullException: source or collectionSelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SelectMany(', 'abbr': 'SelectMany(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TResult>> selector)', 'info': "SelectMany(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TResult>> selector)\nProjects each element of a sequence to an System.Collections.Generic.IEnumerable`1 and flattens the resulting sequences into one sequence.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.\nsource: A sequence of values to project.\nselector: A transform function to apply to each element.The type of the elements of source.The type of the elements of the sequence returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SelectMany(', 'abbr': 'SelectMany(this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)', 'info': "SelectMany(this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)\nProjects each element of a sequence to an System.Collections.Generic.IEnumerable`1, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of source and then mapping each of those sequence elements and their corresponding source element to a result element.\nsource: A sequence of values to project.\ncollectionSelector: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.\nresultSelector: A transform function to apply to each element of the intermediate sequence.The type of the elements of source.The type of the intermediate elements collected by collectionSelector.The type of the elements of the resulting sequence.\nSystem.ArgumentNullException: source or collectionSelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SelectMany(', 'abbr': 'SelectMany(this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TResult>> selector)', 'info': "SelectMany(this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TResult>> selector)\nProjects each element of a sequence to an System.Collections.Generic.IEnumerable`1, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.\nsource: A sequence of values to project.\nselector: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.The type of the elements of source.The type of the elements of the sequence returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SequenceEqual(', 'abbr': 'SequenceEqual(this IEnumerable<TSource> first, IEnumerable<TSource> second)', 'info': "SequenceEqual(this IEnumerable<TSource> first, IEnumerable<TSource> second)\nDetermines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.\nReturns: true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.\nfirst: An System.Collections.Generic.IEnumerable`1 to compare to second.\nsecond: An System.Collections.Generic.IEnumerable`1 to compare to the first sequence.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SequenceEqual(', 'abbr': 'SequenceEqual(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)', 'info': "SequenceEqual(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\nDetermines whether two sequences are equal by comparing their elements by using a specified System.Collections.Generic.IEqualityComparer`1.\nReturns: true if the two source sequences are of equal length and their corresponding elements compare equal according to comparer; otherwise, false.\nfirst: An System.Collections.Generic.IEnumerable`1 to compare to second.\nsecond: An System.Collections.Generic.IEnumerable`1 to compare to the first sequence.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to use to compare elements.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Single(', 'abbr': 'Single(this IEnumerable<TSource> source)', 'info': "Single(this IEnumerable<TSource> source)\nReturns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.\nReturns: The single element of the input sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to return the single element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.InvalidOperationException: The input sequence contains more than one element.-or-The input sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Single(', 'abbr': 'Single(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "Single(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.\nReturns: The single element of the input sequence that satisfies a condition.\nsource: An System.Collections.Generic.IEnumerable`1 to return a single element from.\npredicate: A function to test an element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.\nSystem.InvalidOperationException: No element satisfies the condition in predicate.-or-More than one element satisfies the condition in predicate.-or-The source sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SingleOrDefault(', 'abbr': 'SingleOrDefault(this IEnumerable<TSource> source)', 'info': "SingleOrDefault(this IEnumerable<TSource> source)\nReturns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.\nReturns: The single element of the input sequence, or default(TSource) if the sequence contains no elements.\nsource: An System.Collections.Generic.IEnumerable`1 to return the single element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.InvalidOperationException: The input sequence contains more than one element.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SingleOrDefault(', 'abbr': 'SingleOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "SingleOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.\nReturns: The single element of the input sequence that satisfies the condition, or default(TSource) if no such element is found.\nsource: An System.Collections.Generic.IEnumerable`1 to return a single element from.\npredicate: A function to test an element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Skip(', 'abbr': 'Skip(this IEnumerable<TSource> source, int count)', 'info': "Skip(this IEnumerable<TSource> source, int count)\nBypasses a specified number of elements in a sequence and then returns the remaining elements.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements that occur after the specified index in the input sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to return elements from.\ncount: The number of elements to skip before returning the remaining elements.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SkipWhile(', 'abbr': 'SkipWhile(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "SkipWhile(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nBypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.\nsource: An System.Collections.Generic.IEnumerable`1 to return elements from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SkipWhile(', 'abbr': 'SkipWhile(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)', 'info': "SkipWhile(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)\nBypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.\nsource: An System.Collections.Generic.IEnumerable`1 to return elements from.\npredicate: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)\nComputes the sum of the sequence of nullable System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Decimal.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, decimal> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, decimal> selector)\nComputes the sum of the sequence of System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Decimal.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, double?> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, double?> selector)\nComputes the sum of the sequence of nullable System.Double values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, double> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, double> selector)\nComputes the sum of the sequence of System.Double values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, float?> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, float?> selector)\nComputes the sum of the sequence of nullable System.Single values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, float> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, float> selector)\nComputes the sum of the sequence of System.Single values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, int?> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, int?> selector)\nComputes the sum of the sequence of nullable System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Int32.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, int> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, int> selector)\nComputes the sum of the sequence of System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Int32.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, long?> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, long?> selector)\nComputes the sum of the sequence of nullable System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, long> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, long> selector)\nComputes the sum of the sequence of System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Take(', 'abbr': 'Take(this IEnumerable<TSource> source, int count)', 'info': "Take(this IEnumerable<TSource> source, int count)\nReturns a specified number of contiguous elements from the start of a sequence.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the specified number of elements from the start of the input sequence.\nsource: The sequence to return elements from.\ncount: The number of elements to return.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'TakeWhile(', 'abbr': 'TakeWhile(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "TakeWhile(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns elements from a sequence as long as a specified condition is true.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements from the input sequence that occur before the element at which the test no longer passes.\nsource: A sequence to return elements from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'TakeWhile(', 'abbr': 'TakeWhile(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)', 'info': "TakeWhile(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)\nReturns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements from the input sequence that occur before the element at which the test no longer passes.\nsource: The sequence to return elements from.\npredicate: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToArray(', 'abbr': 'ToArray(this IEnumerable<TSource> source)', 'info': "ToArray(this IEnumerable<TSource> source)\nCreates an array from a System.Collections.Generic.IEnumerable`1.\nReturns: An array that contains the elements from the input sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to create an array from.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToDictionary(', 'abbr': 'ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)', 'info': "ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\nCreates a System.Collections.Generic.Dictionary`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function.\nReturns: A System.Collections.Generic.Dictionary`2 that contains keys and values.\nsource: An System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.Dictionary`2 from.\nkeySelector: A function to extract a key from each element.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.-or-keySelector produces a key that is null.\nSystem.ArgumentException: keySelector produces duplicate keys for two elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToDictionary(', 'abbr': 'ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)', 'info': "ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)\nCreates a System.Collections.Generic.Dictionary`2 from an System.Collections.Generic.IEnumerable`1 according to specified key selector and element selector functions.\nReturns: A System.Collections.Generic.Dictionary`2 that contains values of type TElement selected from the input sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.Dictionary`2 from.\nkeySelector: A function to extract a key from each element.\nelementSelector: A transform function to produce a result element value from each element.The type of the elements of source.The type of the key returned by keySelector.The type of the value returned by elementSelector.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.-or-keySelector produces a key that is null.\nSystem.ArgumentException: keySelector produces duplicate keys for two elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToDictionary(', 'abbr': 'ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)', 'info': "ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)\nCreates a System.Collections.Generic.Dictionary`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function, a comparer, and an element selector function.\nReturns: A System.Collections.Generic.Dictionary`2 that contains values of type TElement selected from the input sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.Dictionary`2 from.\nkeySelector: A function to extract a key from each element.\nelementSelector: A transform function to produce a result element value from each element.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.The type of the value returned by elementSelector.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.-or-keySelector produces a key that is null.\nSystem.ArgumentException: keySelector produces duplicate keys for two elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToDictionary(', 'abbr': 'ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)', 'info': "ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)\nCreates a System.Collections.Generic.Dictionary`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function and key comparer.\nReturns: A System.Collections.Generic.Dictionary`2 that contains keys and values.\nsource: An System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.Dictionary`2 from.\nkeySelector: A function to extract a key from each element.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the keys returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.-or-keySelector produces a key that is null.\nSystem.ArgumentException: keySelector produces duplicate keys for two elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToElementIds()', 'abbr': 'ToElementIds()', 'info': "ToElementIds()", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToElements()', 'abbr': 'ToElements()', 'info': "ToElements()", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToList(', 'abbr': 'ToList(this IEnumerable<TSource> source)', 'info': "ToList(this IEnumerable<TSource> source)\nCreates a System.Collections.Generic.List`1 from an System.Collections.Generic.IEnumerable`1.\nReturns: A System.Collections.Generic.List`1 that contains elements from the input sequence.\nsource: The System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.List`1 from.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToLookup(', 'abbr': 'ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)', 'info': "ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\nCreates a System.Linq.Lookup`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function.\nReturns: A System.Linq.Lookup`2 that contains keys and values.\nsource: The System.Collections.Generic.IEnumerable`1 to create a System.Linq.Lookup`2 from.\nkeySelector: A function to extract a key from each element.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToLookup(', 'abbr': 'ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)', 'info': "ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)\nCreates a System.Linq.Lookup`2 from an System.Collections.Generic.IEnumerable`1 according to specified key selector and element selector functions.\nReturns: A System.Linq.Lookup`2 that contains values of type TElement selected from the input sequence.\nsource: The System.Collections.Generic.IEnumerable`1 to create a System.Linq.Lookup`2 from.\nkeySelector: A function to extract a key from each element.\nelementSelector: A transform function to produce a result element value from each element.The type of the elements of source.The type of the key returned by keySelector.The type of the value returned by elementSelector.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToLookup(', 'abbr': 'ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)', 'info': "ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)\nCreates a System.Linq.Lookup`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function, a comparer and an element selector function.\nReturns: A System.Linq.Lookup`2 that contains values of type TElement selected from the input sequence.\nsource: The System.Collections.Generic.IEnumerable`1 to create a System.Linq.Lookup`2 from.\nkeySelector: A function to extract a key from each element.\nelementSelector: A transform function to produce a result element value from each element.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.The type of the value returned by elementSelector.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToLookup(', 'abbr': 'ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)', 'info': "ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)\nCreates a System.Linq.Lookup`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function and key comparer.\nReturns: A System.Linq.Lookup`2 that contains keys and values.\nsource: The System.Collections.Generic.IEnumerable`1 to create a System.Linq.Lookup`2 from.\nkeySelector: A function to extract a key from each element.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToString()', 'abbr': 'ToString()', 'info': "ToString()\nReturns a string that represents the current object.\nReturns: A string that represents the current object.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Union(', 'abbr': 'Union(this IEnumerable<TSource> first, IEnumerable<TSource> second)', 'info': "Union(this IEnumerable<TSource> first, IEnumerable<TSource> second)\nProduces the set union of two sequences by using the default equality comparer.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements from both input sequences, excluding duplicates.\nfirst: An System.Collections.Generic.IEnumerable`1 whose distinct elements form the first set for the union.\nsecond: An System.Collections.Generic.IEnumerable`1 whose distinct elements form the second set for the union.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Union(', 'abbr': 'Union(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)', 'info': "Union(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\nProduces the set union of two sequences by using a specified System.Collections.Generic.IEqualityComparer`1.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements from both input sequences, excluding duplicates.\nfirst: An System.Collections.Generic.IEnumerable`1 whose distinct elements form the first set for the union.\nsecond: An System.Collections.Generic.IEnumerable`1 whose distinct elements form the second set for the union.\ncomparer: The System.Collections.Generic.IEqualityComparer`1 to compare values.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'UnionWith(', 'abbr': 'UnionWith(FilteredElementCollector other)', 'info': "UnionWith(FilteredElementCollector other)", 'icase': 1, 'dup':1 })
add(words, {'word': 'Where(', 'abbr': 'Where(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "Where(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nFilters a sequence of values based on a predicate.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements from the input sequence that satisfy the condition.\nsource: An System.Collections.Generic.IEnumerable`1 to filter.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Where(', 'abbr': 'Where(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)', 'info': "Where(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)\nFilters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements from the input sequence that satisfy the condition.\nsource: An System.Collections.Generic.IEnumerable`1 to filter.\npredicate: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'WhereElementIsCurveDriven()', 'abbr': 'WhereElementIsCurveDriven()', 'info': "WhereElementIsCurveDriven()", 'icase': 1, 'dup':1 })
add(words, {'word': 'WhereElementIsElementType()', 'abbr': 'WhereElementIsElementType()', 'info': "WhereElementIsElementType()", 'icase': 1, 'dup':1 })
add(words, {'word': 'WhereElementIsNotElementType()', 'abbr': 'WhereElementIsNotElementType()', 'info': "WhereElementIsNotElementType()", 'icase': 1, 'dup':1 })
add(words, {'word': 'WhereElementIsViewIndependent()', 'abbr': 'WhereElementIsViewIndependent()', 'info': "WhereElementIsViewIndependent()", 'icase': 1, 'dup':1 })
add(words, {'word': 'WherePasses(', 'abbr': 'WherePasses(ElementFilter filter)', 'info': "WherePasses(ElementFilter filter)", 'icase': 1, 'dup':1 })
add(words, {'word': 'Zip(', 'abbr': 'Zip(this IEnumerable<TFirst> first, IEnumerable<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)', 'info': "Zip(this IEnumerable<TFirst> first, IEnumerable<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)\nApplies a specified function to the corresponding elements of two sequences, producing a sequence of the results.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements of the two input sequences, combined by resultSelector.\nfirst: The first input sequence.\nsecond: The second input sequence.\nresultSelector: A function that specifies how to combine the corresponding elements of the two sequences.The type of the elements of the first input sequence.The type of the elements of the second input sequence.The type of the elements of the result sequence.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Aggregate(', 'abbr': 'Aggregate(this IEnumerable<TSource> source, Func<TSource, TSource, TSource> func)', 'info': "Aggregate(this IEnumerable<TSource> source, Func<TSource, TSource, TSource> func)\nApplies an accumulator function over a sequence.\nReturns: The final accumulator value.\nsource: An System.Collections.Generic.IEnumerable`1 to aggregate over.\nfunc: An accumulator function to be invoked on each element.The type of the elements of source.\nSystem.ArgumentNullException: source or func is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Aggregate(', 'abbr': 'Aggregate(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func)', 'info': "Aggregate(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func)\nApplies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.\nReturns: The final accumulator value.\nsource: An System.Collections.Generic.IEnumerable`1 to aggregate over.\nseed: The initial accumulator value.\nfunc: An accumulator function to be invoked on each element.The type of the elements of source.The type of the accumulator value.\nSystem.ArgumentNullException: source or func is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Aggregate(', 'abbr': 'Aggregate(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)', 'info': "Aggregate(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)\nApplies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.\nReturns: The transformed final accumulator value.\nsource: An System.Collections.Generic.IEnumerable`1 to aggregate over.\nseed: The initial accumulator value.\nfunc: An accumulator function to be invoked on each element.\nresultSelector: A function to transform the final accumulator value into the result value.The type of the elements of source.The type of the accumulator value.The type of the resulting value.\nSystem.ArgumentNullException: source or func or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'All(', 'abbr': 'All(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "All(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nDetermines whether all elements of a sequence satisfy a condition.\nReturns: true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false.\nsource: An System.Collections.Generic.IEnumerable`1 that contains the elements to apply the predicate to.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Any(', 'abbr': 'Any(this IEnumerable<TSource> source)', 'info': "Any(this IEnumerable<TSource> source)\nDetermines whether a sequence contains any elements.\nReturns: true if the source sequence contains any elements; otherwise, false.\nsource: The System.Collections.Generic.IEnumerable`1 to check for emptiness.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Any(', 'abbr': 'Any(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "Any(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nDetermines whether any element of a sequence satisfies a condition.\nReturns: true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to apply the predicate to.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'AsEnumerable(', 'abbr': 'AsEnumerable(this IEnumerable<TSource> source)', 'info': "AsEnumerable(this IEnumerable<TSource> source)\nReturns the input typed as System.Collections.Generic.IEnumerable`1.\nReturns: The input sequence typed as System.Collections.Generic.IEnumerable`1.\nsource: The sequence to type as System.Collections.Generic.IEnumerable`1.The type of the elements of source.", 'icase': 1, 'dup':1 })
add(words, {'word': 'AsParallel(', 'abbr': 'AsParallel(this IEnumerable source)', 'info': "AsParallel(this IEnumerable source)\nEnables parallelization of a query.\nReturns: The source as a ParallelQuery to bind to ParallelEnumerable extension methods.\nsource: An System.Collections.Generic.IEnumerable to convert to a System.Linq.ParallelQuery.\nSystem.ArgumentNullException: source is a null reference (Nothing in Visual Basic).", 'icase': 1, 'dup':1 })
add(words, {'word': 'AsParallel(', 'abbr': 'AsParallel(this IEnumerable<TSource> source)', 'info': "AsParallel(this IEnumerable<TSource> source)\nEnables parallelization of a query.\nReturns: The source as a System.Linq.ParallelQuery`1 to bind to ParallelEnumerable extension methods.\nsource: An System.Collections.Generic.IEnumerable`1 to convert to a System.Linq.ParallelQuery`1.The type of elements of source.\nSystem.ArgumentNullException: source is a null reference (Nothing in Visual Basic).", 'icase': 1, 'dup':1 })
add(words, {'word': 'AsQueryable(', 'abbr': 'AsQueryable(this IEnumerable source)', 'info': "AsQueryable(this IEnumerable source)\nConverts an System.Collections.IEnumerable to an System.Linq.IQueryable.\nReturns: An System.Linq.IQueryable that represents the input sequence.\nsource: A sequence to convert.\nSystem.ArgumentException: source does not implement System.Collections.Generic.IEnumerable`1 for some T.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'AsQueryable(', 'abbr': 'AsQueryable(this IEnumerable<TElement> source)', 'info': "AsQueryable(this IEnumerable<TElement> source)\nConverts a generic System.Collections.Generic.IEnumerable`1 to a generic System.Linq.IQueryable`1.\nReturns: An System.Linq.IQueryable`1 that represents the input sequence.\nsource: A sequence to convert.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)\nComputes the average of a sequence of nullable System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum of the elements in the sequence is larger than System.Decimal.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, decimal> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, decimal> selector)\nComputes the average of a sequence of System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values.\nsource: A sequence of values that are used to calculate an average.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.\nSystem.OverflowException: The sum of the elements in the sequence is larger than System.Decimal.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, double?> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, double?> selector)\nComputes the average of a sequence of nullable System.Double values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, double> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, double> selector)\nComputes the average of a sequence of System.Double values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, float?> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, float?> selector)\nComputes the average of a sequence of nullable System.Single values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, float> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, float> selector)\nComputes the average of a sequence of System.Single values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, int?> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, int?> selector)\nComputes the average of a sequence of nullable System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum of the elements in the sequence is larger than System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, int> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, int> selector)\nComputes the average of a sequence of System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.\nSystem.OverflowException: The sum of the elements in the sequence is larger than System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, long?> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, long?> selector)\nComputes the average of a sequence of nullable System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, long> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, long> selector)\nComputes the average of a sequence of System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.\nSystem.OverflowException: The sum of the elements in the sequence is larger than System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Cast(', 'abbr': 'Cast(this IEnumerable source)', 'info': "Cast(this IEnumerable source)\nCasts the elements of an System.Collections.IEnumerable to the specified type.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains each element of the source sequence cast to the specified type.\nsource: The System.Collections.IEnumerable that contains the elements to be cast to type TResult.The type to cast the elements of source to.\nSystem.ArgumentNullException: source is null.\nSystem.InvalidCastException: An element in the sequence cannot be cast to type TResult.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Concat(', 'abbr': 'Concat(this IEnumerable<TSource> first, IEnumerable<TSource> second)', 'info': "Concat(this IEnumerable<TSource> first, IEnumerable<TSource> second)\nConcatenates two sequences.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the concatenated elements of the two input sequences.\nfirst: The first sequence to concatenate.\nsecond: The sequence to concatenate to the first sequence.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ContainedInDesignOption(', 'abbr': 'ContainedInDesignOption(ElementId designOptionId)', 'info': "ContainedInDesignOption(ElementId designOptionId)", 'icase': 1, 'dup':1 })
add(words, {'word': 'Contains(', 'abbr': 'Contains(this IEnumerable<TSource> source, TSource value)', 'info': "Contains(this IEnumerable<TSource> source, TSource value)\nDetermines whether a sequence contains a specified element by using the default equality comparer.\nReturns: true if the source sequence contains an element that has the specified value; otherwise, false.\nsource: A sequence in which to locate a value.\nvalue: The value to locate in the sequence.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Contains(', 'abbr': 'Contains(this IEnumerable<TSource> source, TSource value, IEqualityComparer<TSource> comparer)', 'info': "Contains(this IEnumerable<TSource> source, TSource value, IEqualityComparer<TSource> comparer)\nDetermines whether a sequence contains a specified element by using a specified System.Collections.Generic.IEqualityComparer`1.\nReturns: true if the source sequence contains an element that has the specified value; otherwise, false.\nsource: A sequence in which to locate a value.\nvalue: The value to locate in the sequence.\ncomparer: An equality comparer to compare values.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Count(', 'abbr': 'Count(this IEnumerable<TSource> source)', 'info': "Count(this IEnumerable<TSource> source)\nReturns the number of elements in a sequence.\nReturns: The number of elements in the input sequence.\nsource: A sequence that contains elements to be counted.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.OverflowException: The number of elements in source is larger than System.Int32.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Count(', 'abbr': 'Count(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "Count(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns a number that represents how many elements in the specified sequence satisfy a condition.\nReturns: A number that represents how many elements in the sequence satisfy the condition in the predicate function.\nsource: A sequence that contains elements to be tested and counted.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.\nSystem.OverflowException: The number of elements in source is larger than System.Int32.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'DefaultIfEmpty(', 'abbr': 'DefaultIfEmpty(this IEnumerable<TSource> source)', 'info': "DefaultIfEmpty(this IEnumerable<TSource> source)\nReturns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.\nReturns: An System.Collections.Generic.IEnumerable`1 object that contains the default value for the TSource type if source is empty; otherwise, source.\nsource: The sequence to return a default value for if it is empty.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'DefaultIfEmpty(', 'abbr': 'DefaultIfEmpty(this IEnumerable<TSource> source, TSource defaultValue)', 'info': "DefaultIfEmpty(this IEnumerable<TSource> source, TSource defaultValue)\nReturns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains defaultValue if source is empty; otherwise, source.\nsource: The sequence to return the specified value for if it is empty.\ndefaultValue: The value to return if the sequence is empty.The type of the elements of source.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Dispose()', 'abbr': 'Dispose()', 'info': "Dispose()", 'icase': 1, 'dup':1 })
add(words, {'word': 'Distinct(', 'abbr': 'Distinct(this IEnumerable<TSource> source)', 'info': "Distinct(this IEnumerable<TSource> source)\nReturns distinct elements from a sequence by using the default equality comparer to compare values.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains distinct elements from the source sequence.\nsource: The sequence to remove duplicate elements from.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Distinct(', 'abbr': 'Distinct(this IEnumerable<TSource> source, IEqualityComparer<TSource> comparer)', 'info': "Distinct(this IEnumerable<TSource> source, IEqualityComparer<TSource> comparer)\nReturns distinct elements from a sequence by using a specified System.Collections.Generic.IEqualityComparer`1 to compare values.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains distinct elements from the source sequence.\nsource: The sequence to remove duplicate elements from.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare values.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ElementAt(', 'abbr': 'ElementAt(this IEnumerable<TSource> source, int index)', 'info': "ElementAt(this IEnumerable<TSource> source, int index)\nReturns the element at a specified index in a sequence.\nReturns: The element at the specified position in the source sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\nindex: The zero-based index of the element to retrieve.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.ArgumentOutOfRangeException: index is less than 0 or greater than or equal to the number of elements in source.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ElementAtOrDefault(', 'abbr': 'ElementAtOrDefault(this IEnumerable<TSource> source, int index)', 'info': "ElementAtOrDefault(this IEnumerable<TSource> source, int index)\nReturns the element at a specified index in a sequence or a default value if the index is out of range.\nReturns: default(TSource) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\nindex: The zero-based index of the element to retrieve.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Equals(', 'abbr': 'Equals(object obj)', 'info': "Equals(object obj)\nDetermines whether the specified System.Object is equal to the current System.Object.\nReturns: true if the specified System.Object is equal to the current System.Object; otherwise, false.\nobj: The object to compare with the current object. ", 'icase': 1, 'dup':1 })
add(words, {'word': 'Except(', 'abbr': 'Except(this IEnumerable<TSource> first, IEnumerable<TSource> second)', 'info': "Except(this IEnumerable<TSource> first, IEnumerable<TSource> second)\nProduces the set difference of two sequences by using the default equality comparer to compare values.\nReturns: A sequence that contains the set difference of the elements of two sequences.\nfirst: An System.Collections.Generic.IEnumerable`1 whose elements that are not also in second will be returned.\nsecond: An System.Collections.Generic.IEnumerable`1 whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Except(', 'abbr': 'Except(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)', 'info': "Except(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\nProduces the set difference of two sequences by using the specified System.Collections.Generic.IEqualityComparer`1 to compare values.\nReturns: A sequence that contains the set difference of the elements of two sequences.\nfirst: An System.Collections.Generic.IEnumerable`1 whose elements that are not also in second will be returned.\nsecond: An System.Collections.Generic.IEnumerable`1 whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare values.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Excluding(', 'abbr': 'Excluding(ICollection<ElementId> idsToExclude)', 'info': "Excluding(ICollection<ElementId> idsToExclude)", 'icase': 1, 'dup':1 })
add(words, {'word': 'First(', 'abbr': 'First(this IEnumerable<TSource> source)', 'info': "First(this IEnumerable<TSource> source)\nReturns the first element of a sequence.\nReturns: The first element in the specified sequence.\nsource: The System.Collections.Generic.IEnumerable`1 to return the first element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.InvalidOperationException: The source sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'First(', 'abbr': 'First(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "First(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the first element in a sequence that satisfies a specified condition.\nReturns: The first element in the sequence that passes the test in the specified predicate function.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.\nSystem.InvalidOperationException: No element satisfies the condition in predicate.-or-The source sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'FirstElement()', 'abbr': 'FirstElement()', 'info': "FirstElement()", 'icase': 1, 'dup':1 })
add(words, {'word': 'FirstElementId()', 'abbr': 'FirstElementId()', 'info': "FirstElementId()", 'icase': 1, 'dup':1 })
add(words, {'word': 'FirstOrDefault(', 'abbr': 'FirstOrDefault(this IEnumerable<TSource> source)', 'info': "FirstOrDefault(this IEnumerable<TSource> source)\nReturns the first element of a sequence, or a default value if the sequence contains no elements.\nReturns: default(TSource) if source is empty; otherwise, the first element in source.\nsource: The System.Collections.Generic.IEnumerable`1 to return the first element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'FirstOrDefault(', 'abbr': 'FirstOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "FirstOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the first element of the sequence that satisfies a condition or a default value if no such element is found.\nReturns: default(TSource) if source is empty or if no element passes the test specified by predicate; otherwise, the first element in source that passes the test specified by predicate.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GetElementIdIterator()', 'abbr': 'GetElementIdIterator()', 'info': "GetElementIdIterator()", 'icase': 1, 'dup':1 })
add(words, {'word': 'GetElementIterator()', 'abbr': 'GetElementIterator()', 'info': "GetElementIterator()", 'icase': 1, 'dup':1 })
add(words, {'word': 'GetEnumerator()', 'abbr': 'GetEnumerator()', 'info': "GetEnumerator()", 'icase': 1, 'dup':1 })
add(words, {'word': 'GetHashCode()', 'abbr': 'GetHashCode()', 'info': "GetHashCode()\nServes as a hash function for a particular type. \nReturns: A hash code for the current System.Object.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GetType()', 'abbr': 'GetType()', 'info': "GetType()\nGets the System.Type of the current instance.\nReturns: The exact runtime type of the current instance.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\nGroups the elements of a sequence according to a specified key selector function.\nReturns: An IEnumerable<IGrouping<TKey, TSource>> in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each System.Linq.IGrouping`2 object contains a sequence of objects and a key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector)\nGroups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.\nReturns: A collection of elements of type TResult where each element represents a projection over a group and its key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nresultSelector: A function to create a result value from each group.The type of the elements of source.The type of the key returned by keySelector.The type of the result value returned by resultSelector.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector, IEqualityComparer<TKey> comparer)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector, IEqualityComparer<TKey> comparer)\nGroups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.\nReturns: A collection of elements of type TResult where each element represents a projection over a group and its key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nresultSelector: A function to create a result value from each group.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys with.The type of the elements of source.The type of the key returned by keySelector.The type of the result value returned by resultSelector.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)\nGroups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.\nReturns: An IEnumerable<IGrouping<TKey, TElement>> in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each System.Linq.IGrouping`2 object contains a collection of objects of type TElement and a key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nelementSelector: A function to map each source element to an element in the System.Linq.IGrouping`2.The type of the elements of source.The type of the key returned by keySelector.The type of the elements in the System.Linq.IGrouping`2.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector)\nGroups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.\nReturns: A collection of elements of type TResult where each element represents a projection over a group and its key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nelementSelector: A function to map each source element to an element in an System.Linq.IGrouping`2.\nresultSelector: A function to create a result value from each group.The type of the elements of source.The type of the key returned by keySelector.The type of the elements in each System.Linq.IGrouping`2.The type of the result value returned by resultSelector.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector, IEqualityComparer<TKey> comparer)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector, IEqualityComparer<TKey> comparer)\nGroups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.\nReturns: A collection of elements of type TResult where each element represents a projection over a group and its key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nelementSelector: A function to map each source element to an element in an System.Linq.IGrouping`2.\nresultSelector: A function to create a result value from each group.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys with.The type of the elements of source.The type of the key returned by keySelector.The type of the elements in each System.Linq.IGrouping`2.The type of the result value returned by resultSelector.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)\nGroups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.\nReturns: An IEnumerable<IGrouping<TKey, TElement>> in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each System.Linq.IGrouping`2 object contains a collection of objects of type TElement and a key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nelementSelector: A function to map each source element to an element in an System.Linq.IGrouping`2.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.The type of the elements in the System.Linq.IGrouping`2.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)\nGroups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.\nReturns: An IEnumerable<IGrouping<TKey, TSource>> in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each System.Linq.IGrouping`2 object contains a collection of objects and a key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupJoin(', 'abbr': 'GroupJoin(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector)', 'info': "GroupJoin(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector)\nCorrelates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements of type TResult that are obtained by performing a grouped join on two sequences.\nouter: The first sequence to join.\ninner: The sequence to join to the first sequence.\nouterKeySelector: A function to extract the join key from each element of the first sequence.\ninnerKeySelector: A function to extract the join key from each element of the second sequence.\nresultSelector: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.The type of the elements of the first sequence.The type of the elements of the second sequence.The type of the keys returned by the key selector functions.The type of the result elements.\nSystem.ArgumentNullException: outer or inner or outerKeySelector or innerKeySelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupJoin(', 'abbr': 'GroupJoin(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector, IEqualityComparer<TKey> comparer)', 'info': "GroupJoin(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector, IEqualityComparer<TKey> comparer)\nCorrelates the elements of two sequences based on key equality and groups the results. A specified System.Collections.Generic.IEqualityComparer`1 is used to compare keys.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements of type TResult that are obtained by performing a grouped join on two sequences.\nouter: The first sequence to join.\ninner: The sequence to join to the first sequence.\nouterKeySelector: A function to extract the join key from each element of the first sequence.\ninnerKeySelector: A function to extract the join key from each element of the second sequence.\nresultSelector: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to hash and compare keys.The type of the elements of the first sequence.The type of the elements of the second sequence.The type of the keys returned by the key selector functions.The type of the result elements.\nSystem.ArgumentNullException: outer or inner or outerKeySelector or innerKeySelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Intersect(', 'abbr': 'Intersect(this IEnumerable<TSource> first, IEnumerable<TSource> second)', 'info': "Intersect(this IEnumerable<TSource> first, IEnumerable<TSource> second)\nProduces the set intersection of two sequences by using the default equality comparer to compare values.\nReturns: A sequence that contains the elements that form the set intersection of two sequences.\nfirst: An System.Collections.Generic.IEnumerable`1 whose distinct elements that also appear in second will be returned.\nsecond: An System.Collections.Generic.IEnumerable`1 whose distinct elements that also appear in the first sequence will be returned.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Intersect(', 'abbr': 'Intersect(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)', 'info': "Intersect(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\nProduces the set intersection of two sequences by using the specified System.Collections.Generic.IEqualityComparer`1 to compare values.\nReturns: A sequence that contains the elements that form the set intersection of two sequences.\nfirst: An System.Collections.Generic.IEnumerable`1 whose distinct elements that also appear in second will be returned.\nsecond: An System.Collections.Generic.IEnumerable`1 whose distinct elements that also appear in the first sequence will be returned.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare values.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'IntersectWith(', 'abbr': 'IntersectWith(FilteredElementCollector other)', 'info': "IntersectWith(FilteredElementCollector other)", 'icase': 1, 'dup':1 })
add(words, {'word': 'Join(', 'abbr': 'Join(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)', 'info': "Join(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)\nCorrelates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.\nReturns: An System.Collections.Generic.IEnumerable`1 that has elements of type TResult that are obtained by performing an inner join on two sequences.\nouter: The first sequence to join.\ninner: The sequence to join to the first sequence.\nouterKeySelector: A function to extract the join key from each element of the first sequence.\ninnerKeySelector: A function to extract the join key from each element of the second sequence.\nresultSelector: A function to create a result element from two matching elements.The type of the elements of the first sequence.The type of the elements of the second sequence.The type of the keys returned by the key selector functions.The type of the result elements.\nSystem.ArgumentNullException: outer or inner or outerKeySelector or innerKeySelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Join(', 'abbr': 'Join(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer)', 'info': "Join(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer)\nCorrelates the elements of two sequences based on matching keys. A specified System.Collections.Generic.IEqualityComparer`1 is used to compare keys.\nReturns: An System.Collections.Generic.IEnumerable`1 that has elements of type TResult that are obtained by performing an inner join on two sequences.\nouter: The first sequence to join.\ninner: The sequence to join to the first sequence.\nouterKeySelector: A function to extract the join key from each element of the first sequence.\ninnerKeySelector: A function to extract the join key from each element of the second sequence.\nresultSelector: A function to create a result element from two matching elements.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to hash and compare keys.The type of the elements of the first sequence.The type of the elements of the second sequence.The type of the keys returned by the key selector functions.The type of the result elements.\nSystem.ArgumentNullException: outer or inner or outerKeySelector or innerKeySelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Last(', 'abbr': 'Last(this IEnumerable<TSource> source)', 'info': "Last(this IEnumerable<TSource> source)\nReturns the last element of a sequence.\nReturns: The value at the last position in the source sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to return the last element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.InvalidOperationException: The source sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Last(', 'abbr': 'Last(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "Last(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the last element of a sequence that satisfies a specified condition.\nReturns: The last element in the sequence that passes the test in the specified predicate function.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.\nSystem.InvalidOperationException: No element satisfies the condition in predicate.-or-The source sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'LastOrDefault(', 'abbr': 'LastOrDefault(this IEnumerable<TSource> source)', 'info': "LastOrDefault(this IEnumerable<TSource> source)\nReturns the last element of a sequence, or a default value if the sequence contains no elements.\nReturns: default(TSource) if the source sequence is empty; otherwise, the last element in the System.Collections.Generic.IEnumerable`1.\nsource: An System.Collections.Generic.IEnumerable`1 to return the last element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'LastOrDefault(', 'abbr': 'LastOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "LastOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the last element of a sequence that satisfies a condition or a default value if no such element is found.\nReturns: default(TSource) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'LongCount(', 'abbr': 'LongCount(this IEnumerable<TSource> source)', 'info': "LongCount(this IEnumerable<TSource> source)\nReturns an System.Int64 that represents the total number of elements in a sequence.\nReturns: The number of elements in the source sequence.\nsource: An System.Collections.Generic.IEnumerable`1 that contains the elements to be counted.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.OverflowException: The number of elements exceeds System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'LongCount(', 'abbr': 'LongCount(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "LongCount(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns an System.Int64 that represents how many elements in a sequence satisfy a condition.\nReturns: A number that represents how many elements in the sequence satisfy the condition in the predicate function.\nsource: An System.Collections.Generic.IEnumerable`1 that contains the elements to be counted.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.\nSystem.OverflowException: The number of matching elements exceeds System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source)', 'info': "Max(this IEnumerable<TSource> source)\nReturns the maximum value in a generic sequence.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)\nInvokes a transform function on each element of a sequence and returns the maximum nullable System.Decimal value.\nReturns: The value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, decimal> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, decimal> selector)\nInvokes a transform function on each element of a sequence and returns the maximum System.Decimal value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, double?> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, double?> selector)\nInvokes a transform function on each element of a sequence and returns the maximum nullable System.Double value.\nReturns: The value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, double> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, double> selector)\nInvokes a transform function on each element of a sequence and returns the maximum System.Double value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, float?> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, float?> selector)\nInvokes a transform function on each element of a sequence and returns the maximum nullable System.Single value.\nReturns: The value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, float> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, float> selector)\nInvokes a transform function on each element of a sequence and returns the maximum System.Single value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, int?> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, int?> selector)\nInvokes a transform function on each element of a sequence and returns the maximum nullable System.Int32 value.\nReturns: The value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, int> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, int> selector)\nInvokes a transform function on each element of a sequence and returns the maximum System.Int32 value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, long?> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, long?> selector)\nInvokes a transform function on each element of a sequence and returns the maximum nullable System.Int64 value.\nReturns: The value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, long> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, long> selector)\nInvokes a transform function on each element of a sequence and returns the maximum System.Int64 value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, TResult> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, TResult> selector)\nInvokes a transform function on each element of a generic sequence and returns the maximum resulting value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.The type of the value returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source)', 'info': "Min(this IEnumerable<TSource> source)\nReturns the minimum value in a generic sequence.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)\nInvokes a transform function on each element of a sequence and returns the minimum nullable System.Decimal value.\nReturns: The value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, decimal> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, decimal> selector)\nInvokes a transform function on each element of a sequence and returns the minimum System.Decimal value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, double?> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, double?> selector)\nInvokes a transform function on each element of a sequence and returns the minimum nullable System.Double value.\nReturns: The value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, double> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, double> selector)\nInvokes a transform function on each element of a sequence and returns the minimum System.Double value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, float?> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, float?> selector)\nInvokes a transform function on each element of a sequence and returns the minimum nullable System.Single value.\nReturns: The value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, float> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, float> selector)\nInvokes a transform function on each element of a sequence and returns the minimum System.Single value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, int?> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, int?> selector)\nInvokes a transform function on each element of a sequence and returns the minimum nullable System.Int32 value.\nReturns: The value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, int> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, int> selector)\nInvokes a transform function on each element of a sequence and returns the minimum System.Int32 value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, long?> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, long?> selector)\nInvokes a transform function on each element of a sequence and returns the minimum nullable System.Int64 value.\nReturns: The value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, long> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, long> selector)\nInvokes a transform function on each element of a sequence and returns the minimum System.Int64 value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, TResult> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, TResult> selector)\nInvokes a transform function on each element of a generic sequence and returns the minimum resulting value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.The type of the value returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OfCategory(', 'abbr': 'OfCategory(BuiltInCategory category)', 'info': "OfCategory(BuiltInCategory category)", 'icase': 1, 'dup':1 })
add(words, {'word': 'OfCategoryId(', 'abbr': 'OfCategoryId(ElementId categoryId)', 'info': "OfCategoryId(ElementId categoryId)", 'icase': 1, 'dup':1 })
add(words, {'word': 'OfClass(', 'abbr': 'OfClass(Type type)', 'info': "OfClass(Type type)", 'icase': 1, 'dup':1 })
add(words, {'word': 'OfType(', 'abbr': 'OfType(this IEnumerable source)', 'info': "OfType(this IEnumerable source)\nFilters the elements of an System.Collections.IEnumerable based on a specified type.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements from the input sequence of type TResult.\nsource: The System.Collections.IEnumerable whose elements to filter.The type to filter the elements of the sequence on.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OrderBy(', 'abbr': 'OrderBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)', 'info': "OrderBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\nSorts the elements of a sequence in ascending order according to a key.\nReturns: An System.Linq.IOrderedEnumerable`1 whose elements are sorted according to a key.\nsource: A sequence of values to order.\nkeySelector: A function to extract a key from an element.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OrderBy(', 'abbr': 'OrderBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)', 'info': "OrderBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)\nSorts the elements of a sequence in ascending order by using a specified comparer.\nReturns: An System.Linq.IOrderedEnumerable`1 whose elements are sorted according to a key.\nsource: A sequence of values to order.\nkeySelector: A function to extract a key from an element.\ncomparer: An System.Collections.Generic.IComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OrderByDescending(', 'abbr': 'OrderByDescending(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)', 'info': "OrderByDescending(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\nSorts the elements of a sequence in descending order according to a key.\nReturns: An System.Linq.IOrderedEnumerable`1 whose elements are sorted in descending order according to a key.\nsource: A sequence of values to order.\nkeySelector: A function to extract a key from an element.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OrderByDescending(', 'abbr': 'OrderByDescending(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)', 'info': "OrderByDescending(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)\nSorts the elements of a sequence in descending order by using a specified comparer.\nReturns: An System.Linq.IOrderedEnumerable`1 whose elements are sorted in descending order according to a key.\nsource: A sequence of values to order.\nkeySelector: A function to extract a key from an element.\ncomparer: An System.Collections.Generic.IComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OwnedByView(', 'abbr': 'OwnedByView(ElementId viewId)', 'info': "OwnedByView(ElementId viewId)", 'icase': 1, 'dup':1 })
add(words, {'word': 'Reverse(', 'abbr': 'Reverse(this IEnumerable<TSource> source)', 'info': "Reverse(this IEnumerable<TSource> source)\nInverts the order of the elements in a sequence.\nReturns: A sequence whose elements correspond to those of the input sequence in reverse order.\nsource: A sequence of values to reverse.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Select(', 'abbr': 'Select(this IEnumerable<TSource> source, Func<TSource, int, TResult> selector)', 'info': "Select(this IEnumerable<TSource> source, Func<TSource, int, TResult> selector)\nProjects each element of a sequence into a new form by incorporating the element's index.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the transform function on each element of source.\nsource: A sequence of values to invoke a transform function on.\nselector: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.The type of the elements of source.The type of the value returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Select(', 'abbr': 'Select(this IEnumerable<TSource> source, Func<TSource, TResult> selector)', 'info': "Select(this IEnumerable<TSource> source, Func<TSource, TResult> selector)\nProjects each element of a sequence into a new form.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the transform function on each element of source.\nsource: A sequence of values to invoke a transform function on.\nselector: A transform function to apply to each element.The type of the elements of source.The type of the value returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SelectMany(', 'abbr': 'SelectMany(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)', 'info': "SelectMany(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)\nProjects each element of a sequence to an System.Collections.Generic.IEnumerable`1, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of source and then mapping each of those sequence elements and their corresponding source element to a result element.\nsource: A sequence of values to project.\ncollectionSelector: A transform function to apply to each element of the input sequence.\nresultSelector: A transform function to apply to each element of the intermediate sequence.The type of the elements of source.The type of the intermediate elements collected by collectionSelector.The type of the elements of the resulting sequence.\nSystem.ArgumentNullException: source or collectionSelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SelectMany(', 'abbr': 'SelectMany(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TResult>> selector)', 'info': "SelectMany(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TResult>> selector)\nProjects each element of a sequence to an System.Collections.Generic.IEnumerable`1 and flattens the resulting sequences into one sequence.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.\nsource: A sequence of values to project.\nselector: A transform function to apply to each element.The type of the elements of source.The type of the elements of the sequence returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SelectMany(', 'abbr': 'SelectMany(this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)', 'info': "SelectMany(this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)\nProjects each element of a sequence to an System.Collections.Generic.IEnumerable`1, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of source and then mapping each of those sequence elements and their corresponding source element to a result element.\nsource: A sequence of values to project.\ncollectionSelector: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.\nresultSelector: A transform function to apply to each element of the intermediate sequence.The type of the elements of source.The type of the intermediate elements collected by collectionSelector.The type of the elements of the resulting sequence.\nSystem.ArgumentNullException: source or collectionSelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SelectMany(', 'abbr': 'SelectMany(this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TResult>> selector)', 'info': "SelectMany(this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TResult>> selector)\nProjects each element of a sequence to an System.Collections.Generic.IEnumerable`1, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.\nsource: A sequence of values to project.\nselector: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.The type of the elements of source.The type of the elements of the sequence returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SequenceEqual(', 'abbr': 'SequenceEqual(this IEnumerable<TSource> first, IEnumerable<TSource> second)', 'info': "SequenceEqual(this IEnumerable<TSource> first, IEnumerable<TSource> second)\nDetermines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.\nReturns: true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.\nfirst: An System.Collections.Generic.IEnumerable`1 to compare to second.\nsecond: An System.Collections.Generic.IEnumerable`1 to compare to the first sequence.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SequenceEqual(', 'abbr': 'SequenceEqual(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)', 'info': "SequenceEqual(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\nDetermines whether two sequences are equal by comparing their elements by using a specified System.Collections.Generic.IEqualityComparer`1.\nReturns: true if the two source sequences are of equal length and their corresponding elements compare equal according to comparer; otherwise, false.\nfirst: An System.Collections.Generic.IEnumerable`1 to compare to second.\nsecond: An System.Collections.Generic.IEnumerable`1 to compare to the first sequence.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to use to compare elements.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Single(', 'abbr': 'Single(this IEnumerable<TSource> source)', 'info': "Single(this IEnumerable<TSource> source)\nReturns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.\nReturns: The single element of the input sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to return the single element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.InvalidOperationException: The input sequence contains more than one element.-or-The input sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Single(', 'abbr': 'Single(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "Single(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.\nReturns: The single element of the input sequence that satisfies a condition.\nsource: An System.Collections.Generic.IEnumerable`1 to return a single element from.\npredicate: A function to test an element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.\nSystem.InvalidOperationException: No element satisfies the condition in predicate.-or-More than one element satisfies the condition in predicate.-or-The source sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SingleOrDefault(', 'abbr': 'SingleOrDefault(this IEnumerable<TSource> source)', 'info': "SingleOrDefault(this IEnumerable<TSource> source)\nReturns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.\nReturns: The single element of the input sequence, or default(TSource) if the sequence contains no elements.\nsource: An System.Collections.Generic.IEnumerable`1 to return the single element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.InvalidOperationException: The input sequence contains more than one element.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SingleOrDefault(', 'abbr': 'SingleOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "SingleOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.\nReturns: The single element of the input sequence that satisfies the condition, or default(TSource) if no such element is found.\nsource: An System.Collections.Generic.IEnumerable`1 to return a single element from.\npredicate: A function to test an element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Skip(', 'abbr': 'Skip(this IEnumerable<TSource> source, int count)', 'info': "Skip(this IEnumerable<TSource> source, int count)\nBypasses a specified number of elements in a sequence and then returns the remaining elements.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements that occur after the specified index in the input sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to return elements from.\ncount: The number of elements to skip before returning the remaining elements.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SkipWhile(', 'abbr': 'SkipWhile(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "SkipWhile(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nBypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.\nsource: An System.Collections.Generic.IEnumerable`1 to return elements from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SkipWhile(', 'abbr': 'SkipWhile(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)', 'info': "SkipWhile(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)\nBypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.\nsource: An System.Collections.Generic.IEnumerable`1 to return elements from.\npredicate: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)\nComputes the sum of the sequence of nullable System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Decimal.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, decimal> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, decimal> selector)\nComputes the sum of the sequence of System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Decimal.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, double?> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, double?> selector)\nComputes the sum of the sequence of nullable System.Double values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, double> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, double> selector)\nComputes the sum of the sequence of System.Double values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, float?> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, float?> selector)\nComputes the sum of the sequence of nullable System.Single values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, float> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, float> selector)\nComputes the sum of the sequence of System.Single values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, int?> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, int?> selector)\nComputes the sum of the sequence of nullable System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Int32.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, int> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, int> selector)\nComputes the sum of the sequence of System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Int32.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, long?> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, long?> selector)\nComputes the sum of the sequence of nullable System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, long> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, long> selector)\nComputes the sum of the sequence of System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Take(', 'abbr': 'Take(this IEnumerable<TSource> source, int count)', 'info': "Take(this IEnumerable<TSource> source, int count)\nReturns a specified number of contiguous elements from the start of a sequence.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the specified number of elements from the start of the input sequence.\nsource: The sequence to return elements from.\ncount: The number of elements to return.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'TakeWhile(', 'abbr': 'TakeWhile(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "TakeWhile(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns elements from a sequence as long as a specified condition is true.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements from the input sequence that occur before the element at which the test no longer passes.\nsource: A sequence to return elements from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'TakeWhile(', 'abbr': 'TakeWhile(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)', 'info': "TakeWhile(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)\nReturns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements from the input sequence that occur before the element at which the test no longer passes.\nsource: The sequence to return elements from.\npredicate: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToArray(', 'abbr': 'ToArray(this IEnumerable<TSource> source)', 'info': "ToArray(this IEnumerable<TSource> source)\nCreates an array from a System.Collections.Generic.IEnumerable`1.\nReturns: An array that contains the elements from the input sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to create an array from.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToDictionary(', 'abbr': 'ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)', 'info': "ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\nCreates a System.Collections.Generic.Dictionary`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function.\nReturns: A System.Collections.Generic.Dictionary`2 that contains keys and values.\nsource: An System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.Dictionary`2 from.\nkeySelector: A function to extract a key from each element.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.-or-keySelector produces a key that is null.\nSystem.ArgumentException: keySelector produces duplicate keys for two elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToDictionary(', 'abbr': 'ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)', 'info': "ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)\nCreates a System.Collections.Generic.Dictionary`2 from an System.Collections.Generic.IEnumerable`1 according to specified key selector and element selector functions.\nReturns: A System.Collections.Generic.Dictionary`2 that contains values of type TElement selected from the input sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.Dictionary`2 from.\nkeySelector: A function to extract a key from each element.\nelementSelector: A transform function to produce a result element value from each element.The type of the elements of source.The type of the key returned by keySelector.The type of the value returned by elementSelector.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.-or-keySelector produces a key that is null.\nSystem.ArgumentException: keySelector produces duplicate keys for two elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToDictionary(', 'abbr': 'ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)', 'info': "ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)\nCreates a System.Collections.Generic.Dictionary`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function, a comparer, and an element selector function.\nReturns: A System.Collections.Generic.Dictionary`2 that contains values of type TElement selected from the input sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.Dictionary`2 from.\nkeySelector: A function to extract a key from each element.\nelementSelector: A transform function to produce a result element value from each element.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.The type of the value returned by elementSelector.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.-or-keySelector produces a key that is null.\nSystem.ArgumentException: keySelector produces duplicate keys for two elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToDictionary(', 'abbr': 'ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)', 'info': "ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)\nCreates a System.Collections.Generic.Dictionary`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function and key comparer.\nReturns: A System.Collections.Generic.Dictionary`2 that contains keys and values.\nsource: An System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.Dictionary`2 from.\nkeySelector: A function to extract a key from each element.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the keys returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.-or-keySelector produces a key that is null.\nSystem.ArgumentException: keySelector produces duplicate keys for two elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToElementIds()', 'abbr': 'ToElementIds()', 'info': "ToElementIds()", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToElements()', 'abbr': 'ToElements()', 'info': "ToElements()", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToList(', 'abbr': 'ToList(this IEnumerable<TSource> source)', 'info': "ToList(this IEnumerable<TSource> source)\nCreates a System.Collections.Generic.List`1 from an System.Collections.Generic.IEnumerable`1.\nReturns: A System.Collections.Generic.List`1 that contains elements from the input sequence.\nsource: The System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.List`1 from.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToLookup(', 'abbr': 'ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)', 'info': "ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\nCreates a System.Linq.Lookup`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function.\nReturns: A System.Linq.Lookup`2 that contains keys and values.\nsource: The System.Collections.Generic.IEnumerable`1 to create a System.Linq.Lookup`2 from.\nkeySelector: A function to extract a key from each element.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToLookup(', 'abbr': 'ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)', 'info': "ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)\nCreates a System.Linq.Lookup`2 from an System.Collections.Generic.IEnumerable`1 according to specified key selector and element selector functions.\nReturns: A System.Linq.Lookup`2 that contains values of type TElement selected from the input sequence.\nsource: The System.Collections.Generic.IEnumerable`1 to create a System.Linq.Lookup`2 from.\nkeySelector: A function to extract a key from each element.\nelementSelector: A transform function to produce a result element value from each element.The type of the elements of source.The type of the key returned by keySelector.The type of the value returned by elementSelector.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToLookup(', 'abbr': 'ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)', 'info': "ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)\nCreates a System.Linq.Lookup`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function, a comparer and an element selector function.\nReturns: A System.Linq.Lookup`2 that contains values of type TElement selected from the input sequence.\nsource: The System.Collections.Generic.IEnumerable`1 to create a System.Linq.Lookup`2 from.\nkeySelector: A function to extract a key from each element.\nelementSelector: A transform function to produce a result element value from each element.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.The type of the value returned by elementSelector.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToLookup(', 'abbr': 'ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)', 'info': "ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)\nCreates a System.Linq.Lookup`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function and key comparer.\nReturns: A System.Linq.Lookup`2 that contains keys and values.\nsource: The System.Collections.Generic.IEnumerable`1 to create a System.Linq.Lookup`2 from.\nkeySelector: A function to extract a key from each element.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToString()', 'abbr': 'ToString()', 'info': "ToString()\nReturns a string that represents the current object.\nReturns: A string that represents the current object.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Union(', 'abbr': 'Union(this IEnumerable<TSource> first, IEnumerable<TSource> second)', 'info': "Union(this IEnumerable<TSource> first, IEnumerable<TSource> second)\nProduces the set union of two sequences by using the default equality comparer.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements from both input sequences, excluding duplicates.\nfirst: An System.Collections.Generic.IEnumerable`1 whose distinct elements form the first set for the union.\nsecond: An System.Collections.Generic.IEnumerable`1 whose distinct elements form the second set for the union.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Union(', 'abbr': 'Union(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)', 'info': "Union(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\nProduces the set union of two sequences by using a specified System.Collections.Generic.IEqualityComparer`1.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements from both input sequences, excluding duplicates.\nfirst: An System.Collections.Generic.IEnumerable`1 whose distinct elements form the first set for the union.\nsecond: An System.Collections.Generic.IEnumerable`1 whose distinct elements form the second set for the union.\ncomparer: The System.Collections.Generic.IEqualityComparer`1 to compare values.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'UnionWith(', 'abbr': 'UnionWith(FilteredElementCollector other)', 'info': "UnionWith(FilteredElementCollector other)", 'icase': 1, 'dup':1 })
add(words, {'word': 'Where(', 'abbr': 'Where(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "Where(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nFilters a sequence of values based on a predicate.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements from the input sequence that satisfy the condition.\nsource: An System.Collections.Generic.IEnumerable`1 to filter.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Where(', 'abbr': 'Where(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)', 'info': "Where(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)\nFilters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements from the input sequence that satisfy the condition.\nsource: An System.Collections.Generic.IEnumerable`1 to filter.\npredicate: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'WhereElementIsCurveDriven()', 'abbr': 'WhereElementIsCurveDriven()', 'info': "WhereElementIsCurveDriven()", 'icase': 1, 'dup':1 })
add(words, {'word': 'WhereElementIsElementType()', 'abbr': 'WhereElementIsElementType()', 'info': "WhereElementIsElementType()", 'icase': 1, 'dup':1 })
add(words, {'word': 'WhereElementIsNotElementType()', 'abbr': 'WhereElementIsNotElementType()', 'info': "WhereElementIsNotElementType()", 'icase': 1, 'dup':1 })
add(words, {'word': 'WhereElementIsViewIndependent()', 'abbr': 'WhereElementIsViewIndependent()', 'info': "WhereElementIsViewIndependent()", 'icase': 1, 'dup':1 })
add(words, {'word': 'WherePasses(', 'abbr': 'WherePasses(ElementFilter filter)', 'info': "WherePasses(ElementFilter filter)", 'icase': 1, 'dup':1 })
add(words, {'word': 'Zip(', 'abbr': 'Zip(this IEnumerable<TFirst> first, IEnumerable<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)', 'info': "Zip(this IEnumerable<TFirst> first, IEnumerable<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)\nApplies a specified function to the corresponding elements of two sequences, producing a sequence of the results.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements of the two input sequences, combined by resultSelector.\nfirst: The first input sequence.\nsecond: The second input sequence.\nresultSelector: A function that specifies how to combine the corresponding elements of the two sequences.The type of the elements of the first input sequence.The type of the elements of the second input sequence.The type of the elements of the result sequence.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Aggregate(', 'abbr': 'Aggregate(this IEnumerable<TSource> source, Func<TSource, TSource, TSource> func)', 'info': "Aggregate(this IEnumerable<TSource> source, Func<TSource, TSource, TSource> func)\nApplies an accumulator function over a sequence.\nReturns: The final accumulator value.\nsource: An System.Collections.Generic.IEnumerable`1 to aggregate over.\nfunc: An accumulator function to be invoked on each element.The type of the elements of source.\nSystem.ArgumentNullException: source or func is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Aggregate(', 'abbr': 'Aggregate(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func)', 'info': "Aggregate(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func)\nApplies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.\nReturns: The final accumulator value.\nsource: An System.Collections.Generic.IEnumerable`1 to aggregate over.\nseed: The initial accumulator value.\nfunc: An accumulator function to be invoked on each element.The type of the elements of source.The type of the accumulator value.\nSystem.ArgumentNullException: source or func is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Aggregate(', 'abbr': 'Aggregate(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)', 'info': "Aggregate(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)\nApplies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.\nReturns: The transformed final accumulator value.\nsource: An System.Collections.Generic.IEnumerable`1 to aggregate over.\nseed: The initial accumulator value.\nfunc: An accumulator function to be invoked on each element.\nresultSelector: A function to transform the final accumulator value into the result value.The type of the elements of source.The type of the accumulator value.The type of the resulting value.\nSystem.ArgumentNullException: source or func or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'All(', 'abbr': 'All(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "All(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nDetermines whether all elements of a sequence satisfy a condition.\nReturns: true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false.\nsource: An System.Collections.Generic.IEnumerable`1 that contains the elements to apply the predicate to.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Any(', 'abbr': 'Any(this IEnumerable<TSource> source)', 'info': "Any(this IEnumerable<TSource> source)\nDetermines whether a sequence contains any elements.\nReturns: true if the source sequence contains any elements; otherwise, false.\nsource: The System.Collections.Generic.IEnumerable`1 to check for emptiness.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Any(', 'abbr': 'Any(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "Any(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nDetermines whether any element of a sequence satisfies a condition.\nReturns: true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to apply the predicate to.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'AsEnumerable(', 'abbr': 'AsEnumerable(this IEnumerable<TSource> source)', 'info': "AsEnumerable(this IEnumerable<TSource> source)\nReturns the input typed as System.Collections.Generic.IEnumerable`1.\nReturns: The input sequence typed as System.Collections.Generic.IEnumerable`1.\nsource: The sequence to type as System.Collections.Generic.IEnumerable`1.The type of the elements of source.", 'icase': 1, 'dup':1 })
add(words, {'word': 'AsParallel(', 'abbr': 'AsParallel(this IEnumerable source)', 'info': "AsParallel(this IEnumerable source)\nEnables parallelization of a query.\nReturns: The source as a ParallelQuery to bind to ParallelEnumerable extension methods.\nsource: An System.Collections.Generic.IEnumerable to convert to a System.Linq.ParallelQuery.\nSystem.ArgumentNullException: source is a null reference (Nothing in Visual Basic).", 'icase': 1, 'dup':1 })
add(words, {'word': 'AsParallel(', 'abbr': 'AsParallel(this IEnumerable<TSource> source)', 'info': "AsParallel(this IEnumerable<TSource> source)\nEnables parallelization of a query.\nReturns: The source as a System.Linq.ParallelQuery`1 to bind to ParallelEnumerable extension methods.\nsource: An System.Collections.Generic.IEnumerable`1 to convert to a System.Linq.ParallelQuery`1.The type of elements of source.\nSystem.ArgumentNullException: source is a null reference (Nothing in Visual Basic).", 'icase': 1, 'dup':1 })
add(words, {'word': 'AsQueryable(', 'abbr': 'AsQueryable(this IEnumerable source)', 'info': "AsQueryable(this IEnumerable source)\nConverts an System.Collections.IEnumerable to an System.Linq.IQueryable.\nReturns: An System.Linq.IQueryable that represents the input sequence.\nsource: A sequence to convert.\nSystem.ArgumentException: source does not implement System.Collections.Generic.IEnumerable`1 for some T.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'AsQueryable(', 'abbr': 'AsQueryable(this IEnumerable<TElement> source)', 'info': "AsQueryable(this IEnumerable<TElement> source)\nConverts a generic System.Collections.Generic.IEnumerable`1 to a generic System.Linq.IQueryable`1.\nReturns: An System.Linq.IQueryable`1 that represents the input sequence.\nsource: A sequence to convert.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)\nComputes the average of a sequence of nullable System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum of the elements in the sequence is larger than System.Decimal.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, decimal> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, decimal> selector)\nComputes the average of a sequence of System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values.\nsource: A sequence of values that are used to calculate an average.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.\nSystem.OverflowException: The sum of the elements in the sequence is larger than System.Decimal.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, double?> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, double?> selector)\nComputes the average of a sequence of nullable System.Double values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, double> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, double> selector)\nComputes the average of a sequence of System.Double values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, float?> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, float?> selector)\nComputes the average of a sequence of nullable System.Single values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, float> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, float> selector)\nComputes the average of a sequence of System.Single values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, int?> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, int?> selector)\nComputes the average of a sequence of nullable System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum of the elements in the sequence is larger than System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, int> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, int> selector)\nComputes the average of a sequence of System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.\nSystem.OverflowException: The sum of the elements in the sequence is larger than System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, long?> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, long?> selector)\nComputes the average of a sequence of nullable System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Average(', 'abbr': 'Average(this IEnumerable<TSource> source, Func<TSource, long> selector)', 'info': "Average(this IEnumerable<TSource> source, Func<TSource, long> selector)\nComputes the average of a sequence of System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The average of the sequence of values.\nsource: A sequence of values to calculate the average of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.\nSystem.OverflowException: The sum of the elements in the sequence is larger than System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Cast(', 'abbr': 'Cast(this IEnumerable source)', 'info': "Cast(this IEnumerable source)\nCasts the elements of an System.Collections.IEnumerable to the specified type.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains each element of the source sequence cast to the specified type.\nsource: The System.Collections.IEnumerable that contains the elements to be cast to type TResult.The type to cast the elements of source to.\nSystem.ArgumentNullException: source is null.\nSystem.InvalidCastException: An element in the sequence cannot be cast to type TResult.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Concat(', 'abbr': 'Concat(this IEnumerable<TSource> first, IEnumerable<TSource> second)', 'info': "Concat(this IEnumerable<TSource> first, IEnumerable<TSource> second)\nConcatenates two sequences.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the concatenated elements of the two input sequences.\nfirst: The first sequence to concatenate.\nsecond: The sequence to concatenate to the first sequence.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ContainedInDesignOption(', 'abbr': 'ContainedInDesignOption(ElementId designOptionId)', 'info': "ContainedInDesignOption(ElementId designOptionId)", 'icase': 1, 'dup':1 })
add(words, {'word': 'Contains(', 'abbr': 'Contains(this IEnumerable<TSource> source, TSource value)', 'info': "Contains(this IEnumerable<TSource> source, TSource value)\nDetermines whether a sequence contains a specified element by using the default equality comparer.\nReturns: true if the source sequence contains an element that has the specified value; otherwise, false.\nsource: A sequence in which to locate a value.\nvalue: The value to locate in the sequence.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Contains(', 'abbr': 'Contains(this IEnumerable<TSource> source, TSource value, IEqualityComparer<TSource> comparer)', 'info': "Contains(this IEnumerable<TSource> source, TSource value, IEqualityComparer<TSource> comparer)\nDetermines whether a sequence contains a specified element by using a specified System.Collections.Generic.IEqualityComparer`1.\nReturns: true if the source sequence contains an element that has the specified value; otherwise, false.\nsource: A sequence in which to locate a value.\nvalue: The value to locate in the sequence.\ncomparer: An equality comparer to compare values.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Count(', 'abbr': 'Count(this IEnumerable<TSource> source)', 'info': "Count(this IEnumerable<TSource> source)\nReturns the number of elements in a sequence.\nReturns: The number of elements in the input sequence.\nsource: A sequence that contains elements to be counted.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.OverflowException: The number of elements in source is larger than System.Int32.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Count(', 'abbr': 'Count(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "Count(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns a number that represents how many elements in the specified sequence satisfy a condition.\nReturns: A number that represents how many elements in the sequence satisfy the condition in the predicate function.\nsource: A sequence that contains elements to be tested and counted.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.\nSystem.OverflowException: The number of elements in source is larger than System.Int32.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'DefaultIfEmpty(', 'abbr': 'DefaultIfEmpty(this IEnumerable<TSource> source)', 'info': "DefaultIfEmpty(this IEnumerable<TSource> source)\nReturns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.\nReturns: An System.Collections.Generic.IEnumerable`1 object that contains the default value for the TSource type if source is empty; otherwise, source.\nsource: The sequence to return a default value for if it is empty.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'DefaultIfEmpty(', 'abbr': 'DefaultIfEmpty(this IEnumerable<TSource> source, TSource defaultValue)', 'info': "DefaultIfEmpty(this IEnumerable<TSource> source, TSource defaultValue)\nReturns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains defaultValue if source is empty; otherwise, source.\nsource: The sequence to return the specified value for if it is empty.\ndefaultValue: The value to return if the sequence is empty.The type of the elements of source.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Dispose()', 'abbr': 'Dispose()', 'info': "Dispose()", 'icase': 1, 'dup':1 })
add(words, {'word': 'Distinct(', 'abbr': 'Distinct(this IEnumerable<TSource> source)', 'info': "Distinct(this IEnumerable<TSource> source)\nReturns distinct elements from a sequence by using the default equality comparer to compare values.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains distinct elements from the source sequence.\nsource: The sequence to remove duplicate elements from.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Distinct(', 'abbr': 'Distinct(this IEnumerable<TSource> source, IEqualityComparer<TSource> comparer)', 'info': "Distinct(this IEnumerable<TSource> source, IEqualityComparer<TSource> comparer)\nReturns distinct elements from a sequence by using a specified System.Collections.Generic.IEqualityComparer`1 to compare values.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains distinct elements from the source sequence.\nsource: The sequence to remove duplicate elements from.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare values.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ElementAt(', 'abbr': 'ElementAt(this IEnumerable<TSource> source, int index)', 'info': "ElementAt(this IEnumerable<TSource> source, int index)\nReturns the element at a specified index in a sequence.\nReturns: The element at the specified position in the source sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\nindex: The zero-based index of the element to retrieve.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.ArgumentOutOfRangeException: index is less than 0 or greater than or equal to the number of elements in source.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ElementAtOrDefault(', 'abbr': 'ElementAtOrDefault(this IEnumerable<TSource> source, int index)', 'info': "ElementAtOrDefault(this IEnumerable<TSource> source, int index)\nReturns the element at a specified index in a sequence or a default value if the index is out of range.\nReturns: default(TSource) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\nindex: The zero-based index of the element to retrieve.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Equals(', 'abbr': 'Equals(object obj)', 'info': "Equals(object obj)\nDetermines whether the specified System.Object is equal to the current System.Object.\nReturns: true if the specified System.Object is equal to the current System.Object; otherwise, false.\nobj: The object to compare with the current object. ", 'icase': 1, 'dup':1 })
add(words, {'word': 'Except(', 'abbr': 'Except(this IEnumerable<TSource> first, IEnumerable<TSource> second)', 'info': "Except(this IEnumerable<TSource> first, IEnumerable<TSource> second)\nProduces the set difference of two sequences by using the default equality comparer to compare values.\nReturns: A sequence that contains the set difference of the elements of two sequences.\nfirst: An System.Collections.Generic.IEnumerable`1 whose elements that are not also in second will be returned.\nsecond: An System.Collections.Generic.IEnumerable`1 whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Except(', 'abbr': 'Except(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)', 'info': "Except(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\nProduces the set difference of two sequences by using the specified System.Collections.Generic.IEqualityComparer`1 to compare values.\nReturns: A sequence that contains the set difference of the elements of two sequences.\nfirst: An System.Collections.Generic.IEnumerable`1 whose elements that are not also in second will be returned.\nsecond: An System.Collections.Generic.IEnumerable`1 whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare values.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Excluding(', 'abbr': 'Excluding(ICollection<ElementId> idsToExclude)', 'info': "Excluding(ICollection<ElementId> idsToExclude)", 'icase': 1, 'dup':1 })
add(words, {'word': 'First(', 'abbr': 'First(this IEnumerable<TSource> source)', 'info': "First(this IEnumerable<TSource> source)\nReturns the first element of a sequence.\nReturns: The first element in the specified sequence.\nsource: The System.Collections.Generic.IEnumerable`1 to return the first element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.InvalidOperationException: The source sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'First(', 'abbr': 'First(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "First(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the first element in a sequence that satisfies a specified condition.\nReturns: The first element in the sequence that passes the test in the specified predicate function.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.\nSystem.InvalidOperationException: No element satisfies the condition in predicate.-or-The source sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'FirstElement()', 'abbr': 'FirstElement()', 'info': "FirstElement()", 'icase': 1, 'dup':1 })
add(words, {'word': 'FirstElementId()', 'abbr': 'FirstElementId()', 'info': "FirstElementId()", 'icase': 1, 'dup':1 })
add(words, {'word': 'FirstOrDefault(', 'abbr': 'FirstOrDefault(this IEnumerable<TSource> source)', 'info': "FirstOrDefault(this IEnumerable<TSource> source)\nReturns the first element of a sequence, or a default value if the sequence contains no elements.\nReturns: default(TSource) if source is empty; otherwise, the first element in source.\nsource: The System.Collections.Generic.IEnumerable`1 to return the first element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'FirstOrDefault(', 'abbr': 'FirstOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "FirstOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the first element of the sequence that satisfies a condition or a default value if no such element is found.\nReturns: default(TSource) if source is empty or if no element passes the test specified by predicate; otherwise, the first element in source that passes the test specified by predicate.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GetElementIdIterator()', 'abbr': 'GetElementIdIterator()', 'info': "GetElementIdIterator()", 'icase': 1, 'dup':1 })
add(words, {'word': 'GetElementIterator()', 'abbr': 'GetElementIterator()', 'info': "GetElementIterator()", 'icase': 1, 'dup':1 })
add(words, {'word': 'GetEnumerator()', 'abbr': 'GetEnumerator()', 'info': "GetEnumerator()", 'icase': 1, 'dup':1 })
add(words, {'word': 'GetHashCode()', 'abbr': 'GetHashCode()', 'info': "GetHashCode()\nServes as a hash function for a particular type. \nReturns: A hash code for the current System.Object.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GetType()', 'abbr': 'GetType()', 'info': "GetType()\nGets the System.Type of the current instance.\nReturns: The exact runtime type of the current instance.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\nGroups the elements of a sequence according to a specified key selector function.\nReturns: An IEnumerable<IGrouping<TKey, TSource>> in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each System.Linq.IGrouping`2 object contains a sequence of objects and a key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector)\nGroups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.\nReturns: A collection of elements of type TResult where each element represents a projection over a group and its key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nresultSelector: A function to create a result value from each group.The type of the elements of source.The type of the key returned by keySelector.The type of the result value returned by resultSelector.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector, IEqualityComparer<TKey> comparer)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector, IEqualityComparer<TKey> comparer)\nGroups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.\nReturns: A collection of elements of type TResult where each element represents a projection over a group and its key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nresultSelector: A function to create a result value from each group.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys with.The type of the elements of source.The type of the key returned by keySelector.The type of the result value returned by resultSelector.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)\nGroups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.\nReturns: An IEnumerable<IGrouping<TKey, TElement>> in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each System.Linq.IGrouping`2 object contains a collection of objects of type TElement and a key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nelementSelector: A function to map each source element to an element in the System.Linq.IGrouping`2.The type of the elements of source.The type of the key returned by keySelector.The type of the elements in the System.Linq.IGrouping`2.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector)\nGroups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.\nReturns: A collection of elements of type TResult where each element represents a projection over a group and its key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nelementSelector: A function to map each source element to an element in an System.Linq.IGrouping`2.\nresultSelector: A function to create a result value from each group.The type of the elements of source.The type of the key returned by keySelector.The type of the elements in each System.Linq.IGrouping`2.The type of the result value returned by resultSelector.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector, IEqualityComparer<TKey> comparer)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector, IEqualityComparer<TKey> comparer)\nGroups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.\nReturns: A collection of elements of type TResult where each element represents a projection over a group and its key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nelementSelector: A function to map each source element to an element in an System.Linq.IGrouping`2.\nresultSelector: A function to create a result value from each group.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys with.The type of the elements of source.The type of the key returned by keySelector.The type of the elements in each System.Linq.IGrouping`2.The type of the result value returned by resultSelector.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)\nGroups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.\nReturns: An IEnumerable<IGrouping<TKey, TElement>> in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each System.Linq.IGrouping`2 object contains a collection of objects of type TElement and a key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\nelementSelector: A function to map each source element to an element in an System.Linq.IGrouping`2.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.The type of the elements in the System.Linq.IGrouping`2.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupBy(', 'abbr': 'GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)', 'info': "GroupBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)\nGroups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.\nReturns: An IEnumerable<IGrouping<TKey, TSource>> in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each System.Linq.IGrouping`2 object contains a collection of objects and a key.\nsource: An System.Collections.Generic.IEnumerable`1 whose elements to group.\nkeySelector: A function to extract the key for each element.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupJoin(', 'abbr': 'GroupJoin(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector)', 'info': "GroupJoin(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector)\nCorrelates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements of type TResult that are obtained by performing a grouped join on two sequences.\nouter: The first sequence to join.\ninner: The sequence to join to the first sequence.\nouterKeySelector: A function to extract the join key from each element of the first sequence.\ninnerKeySelector: A function to extract the join key from each element of the second sequence.\nresultSelector: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.The type of the elements of the first sequence.The type of the elements of the second sequence.The type of the keys returned by the key selector functions.The type of the result elements.\nSystem.ArgumentNullException: outer or inner or outerKeySelector or innerKeySelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'GroupJoin(', 'abbr': 'GroupJoin(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector, IEqualityComparer<TKey> comparer)', 'info': "GroupJoin(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector, IEqualityComparer<TKey> comparer)\nCorrelates the elements of two sequences based on key equality and groups the results. A specified System.Collections.Generic.IEqualityComparer`1 is used to compare keys.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements of type TResult that are obtained by performing a grouped join on two sequences.\nouter: The first sequence to join.\ninner: The sequence to join to the first sequence.\nouterKeySelector: A function to extract the join key from each element of the first sequence.\ninnerKeySelector: A function to extract the join key from each element of the second sequence.\nresultSelector: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to hash and compare keys.The type of the elements of the first sequence.The type of the elements of the second sequence.The type of the keys returned by the key selector functions.The type of the result elements.\nSystem.ArgumentNullException: outer or inner or outerKeySelector or innerKeySelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Intersect(', 'abbr': 'Intersect(this IEnumerable<TSource> first, IEnumerable<TSource> second)', 'info': "Intersect(this IEnumerable<TSource> first, IEnumerable<TSource> second)\nProduces the set intersection of two sequences by using the default equality comparer to compare values.\nReturns: A sequence that contains the elements that form the set intersection of two sequences.\nfirst: An System.Collections.Generic.IEnumerable`1 whose distinct elements that also appear in second will be returned.\nsecond: An System.Collections.Generic.IEnumerable`1 whose distinct elements that also appear in the first sequence will be returned.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Intersect(', 'abbr': 'Intersect(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)', 'info': "Intersect(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\nProduces the set intersection of two sequences by using the specified System.Collections.Generic.IEqualityComparer`1 to compare values.\nReturns: A sequence that contains the elements that form the set intersection of two sequences.\nfirst: An System.Collections.Generic.IEnumerable`1 whose distinct elements that also appear in second will be returned.\nsecond: An System.Collections.Generic.IEnumerable`1 whose distinct elements that also appear in the first sequence will be returned.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare values.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'IntersectWith(', 'abbr': 'IntersectWith(FilteredElementCollector other)', 'info': "IntersectWith(FilteredElementCollector other)", 'icase': 1, 'dup':1 })
add(words, {'word': 'Join(', 'abbr': 'Join(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)', 'info': "Join(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)\nCorrelates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.\nReturns: An System.Collections.Generic.IEnumerable`1 that has elements of type TResult that are obtained by performing an inner join on two sequences.\nouter: The first sequence to join.\ninner: The sequence to join to the first sequence.\nouterKeySelector: A function to extract the join key from each element of the first sequence.\ninnerKeySelector: A function to extract the join key from each element of the second sequence.\nresultSelector: A function to create a result element from two matching elements.The type of the elements of the first sequence.The type of the elements of the second sequence.The type of the keys returned by the key selector functions.The type of the result elements.\nSystem.ArgumentNullException: outer or inner or outerKeySelector or innerKeySelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Join(', 'abbr': 'Join(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer)', 'info': "Join(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer)\nCorrelates the elements of two sequences based on matching keys. A specified System.Collections.Generic.IEqualityComparer`1 is used to compare keys.\nReturns: An System.Collections.Generic.IEnumerable`1 that has elements of type TResult that are obtained by performing an inner join on two sequences.\nouter: The first sequence to join.\ninner: The sequence to join to the first sequence.\nouterKeySelector: A function to extract the join key from each element of the first sequence.\ninnerKeySelector: A function to extract the join key from each element of the second sequence.\nresultSelector: A function to create a result element from two matching elements.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to hash and compare keys.The type of the elements of the first sequence.The type of the elements of the second sequence.The type of the keys returned by the key selector functions.The type of the result elements.\nSystem.ArgumentNullException: outer or inner or outerKeySelector or innerKeySelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Last(', 'abbr': 'Last(this IEnumerable<TSource> source)', 'info': "Last(this IEnumerable<TSource> source)\nReturns the last element of a sequence.\nReturns: The value at the last position in the source sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to return the last element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.InvalidOperationException: The source sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Last(', 'abbr': 'Last(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "Last(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the last element of a sequence that satisfies a specified condition.\nReturns: The last element in the sequence that passes the test in the specified predicate function.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.\nSystem.InvalidOperationException: No element satisfies the condition in predicate.-or-The source sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'LastOrDefault(', 'abbr': 'LastOrDefault(this IEnumerable<TSource> source)', 'info': "LastOrDefault(this IEnumerable<TSource> source)\nReturns the last element of a sequence, or a default value if the sequence contains no elements.\nReturns: default(TSource) if the source sequence is empty; otherwise, the last element in the System.Collections.Generic.IEnumerable`1.\nsource: An System.Collections.Generic.IEnumerable`1 to return the last element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'LastOrDefault(', 'abbr': 'LastOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "LastOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the last element of a sequence that satisfies a condition or a default value if no such element is found.\nReturns: default(TSource) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.\nsource: An System.Collections.Generic.IEnumerable`1 to return an element from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'LongCount(', 'abbr': 'LongCount(this IEnumerable<TSource> source)', 'info': "LongCount(this IEnumerable<TSource> source)\nReturns an System.Int64 that represents the total number of elements in a sequence.\nReturns: The number of elements in the source sequence.\nsource: An System.Collections.Generic.IEnumerable`1 that contains the elements to be counted.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.OverflowException: The number of elements exceeds System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'LongCount(', 'abbr': 'LongCount(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "LongCount(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns an System.Int64 that represents how many elements in a sequence satisfy a condition.\nReturns: A number that represents how many elements in the sequence satisfy the condition in the predicate function.\nsource: An System.Collections.Generic.IEnumerable`1 that contains the elements to be counted.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.\nSystem.OverflowException: The number of matching elements exceeds System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source)', 'info': "Max(this IEnumerable<TSource> source)\nReturns the maximum value in a generic sequence.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)\nInvokes a transform function on each element of a sequence and returns the maximum nullable System.Decimal value.\nReturns: The value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, decimal> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, decimal> selector)\nInvokes a transform function on each element of a sequence and returns the maximum System.Decimal value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, double?> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, double?> selector)\nInvokes a transform function on each element of a sequence and returns the maximum nullable System.Double value.\nReturns: The value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, double> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, double> selector)\nInvokes a transform function on each element of a sequence and returns the maximum System.Double value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, float?> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, float?> selector)\nInvokes a transform function on each element of a sequence and returns the maximum nullable System.Single value.\nReturns: The value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, float> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, float> selector)\nInvokes a transform function on each element of a sequence and returns the maximum System.Single value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, int?> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, int?> selector)\nInvokes a transform function on each element of a sequence and returns the maximum nullable System.Int32 value.\nReturns: The value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, int> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, int> selector)\nInvokes a transform function on each element of a sequence and returns the maximum System.Int32 value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, long?> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, long?> selector)\nInvokes a transform function on each element of a sequence and returns the maximum nullable System.Int64 value.\nReturns: The value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, long> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, long> selector)\nInvokes a transform function on each element of a sequence and returns the maximum System.Int64 value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Max(', 'abbr': 'Max(this IEnumerable<TSource> source, Func<TSource, TResult> selector)', 'info': "Max(this IEnumerable<TSource> source, Func<TSource, TResult> selector)\nInvokes a transform function on each element of a generic sequence and returns the maximum resulting value.\nReturns: The maximum value in the sequence.\nsource: A sequence of values to determine the maximum value of.\nselector: A transform function to apply to each element.The type of the elements of source.The type of the value returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source)', 'info': "Min(this IEnumerable<TSource> source)\nReturns the minimum value in a generic sequence.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)\nInvokes a transform function on each element of a sequence and returns the minimum nullable System.Decimal value.\nReturns: The value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, decimal> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, decimal> selector)\nInvokes a transform function on each element of a sequence and returns the minimum System.Decimal value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, double?> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, double?> selector)\nInvokes a transform function on each element of a sequence and returns the minimum nullable System.Double value.\nReturns: The value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, double> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, double> selector)\nInvokes a transform function on each element of a sequence and returns the minimum System.Double value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, float?> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, float?> selector)\nInvokes a transform function on each element of a sequence and returns the minimum nullable System.Single value.\nReturns: The value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, float> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, float> selector)\nInvokes a transform function on each element of a sequence and returns the minimum System.Single value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, int?> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, int?> selector)\nInvokes a transform function on each element of a sequence and returns the minimum nullable System.Int32 value.\nReturns: The value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, int> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, int> selector)\nInvokes a transform function on each element of a sequence and returns the minimum System.Int32 value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, long?> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, long?> selector)\nInvokes a transform function on each element of a sequence and returns the minimum nullable System.Int64 value.\nReturns: The value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, long> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, long> selector)\nInvokes a transform function on each element of a sequence and returns the minimum System.Int64 value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.InvalidOperationException: source contains no elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Min(', 'abbr': 'Min(this IEnumerable<TSource> source, Func<TSource, TResult> selector)', 'info': "Min(this IEnumerable<TSource> source, Func<TSource, TResult> selector)\nInvokes a transform function on each element of a generic sequence and returns the minimum resulting value.\nReturns: The minimum value in the sequence.\nsource: A sequence of values to determine the minimum value of.\nselector: A transform function to apply to each element.The type of the elements of source.The type of the value returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OfCategory(', 'abbr': 'OfCategory(BuiltInCategory category)', 'info': "OfCategory(BuiltInCategory category)", 'icase': 1, 'dup':1 })
add(words, {'word': 'OfCategoryId(', 'abbr': 'OfCategoryId(ElementId categoryId)', 'info': "OfCategoryId(ElementId categoryId)", 'icase': 1, 'dup':1 })
add(words, {'word': 'OfClass(', 'abbr': 'OfClass(Type type)', 'info': "OfClass(Type type)", 'icase': 1, 'dup':1 })
add(words, {'word': 'OfType(', 'abbr': 'OfType(this IEnumerable source)', 'info': "OfType(this IEnumerable source)\nFilters the elements of an System.Collections.IEnumerable based on a specified type.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements from the input sequence of type TResult.\nsource: The System.Collections.IEnumerable whose elements to filter.The type to filter the elements of the sequence on.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OrderBy(', 'abbr': 'OrderBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)', 'info': "OrderBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\nSorts the elements of a sequence in ascending order according to a key.\nReturns: An System.Linq.IOrderedEnumerable`1 whose elements are sorted according to a key.\nsource: A sequence of values to order.\nkeySelector: A function to extract a key from an element.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OrderBy(', 'abbr': 'OrderBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)', 'info': "OrderBy(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)\nSorts the elements of a sequence in ascending order by using a specified comparer.\nReturns: An System.Linq.IOrderedEnumerable`1 whose elements are sorted according to a key.\nsource: A sequence of values to order.\nkeySelector: A function to extract a key from an element.\ncomparer: An System.Collections.Generic.IComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OrderByDescending(', 'abbr': 'OrderByDescending(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)', 'info': "OrderByDescending(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\nSorts the elements of a sequence in descending order according to a key.\nReturns: An System.Linq.IOrderedEnumerable`1 whose elements are sorted in descending order according to a key.\nsource: A sequence of values to order.\nkeySelector: A function to extract a key from an element.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OrderByDescending(', 'abbr': 'OrderByDescending(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)', 'info': "OrderByDescending(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)\nSorts the elements of a sequence in descending order by using a specified comparer.\nReturns: An System.Linq.IOrderedEnumerable`1 whose elements are sorted in descending order according to a key.\nsource: A sequence of values to order.\nkeySelector: A function to extract a key from an element.\ncomparer: An System.Collections.Generic.IComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'OwnedByView(', 'abbr': 'OwnedByView(ElementId viewId)', 'info': "OwnedByView(ElementId viewId)", 'icase': 1, 'dup':1 })
add(words, {'word': 'Reverse(', 'abbr': 'Reverse(this IEnumerable<TSource> source)', 'info': "Reverse(this IEnumerable<TSource> source)\nInverts the order of the elements in a sequence.\nReturns: A sequence whose elements correspond to those of the input sequence in reverse order.\nsource: A sequence of values to reverse.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Select(', 'abbr': 'Select(this IEnumerable<TSource> source, Func<TSource, int, TResult> selector)', 'info': "Select(this IEnumerable<TSource> source, Func<TSource, int, TResult> selector)\nProjects each element of a sequence into a new form by incorporating the element's index.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the transform function on each element of source.\nsource: A sequence of values to invoke a transform function on.\nselector: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.The type of the elements of source.The type of the value returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Select(', 'abbr': 'Select(this IEnumerable<TSource> source, Func<TSource, TResult> selector)', 'info': "Select(this IEnumerable<TSource> source, Func<TSource, TResult> selector)\nProjects each element of a sequence into a new form.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the transform function on each element of source.\nsource: A sequence of values to invoke a transform function on.\nselector: A transform function to apply to each element.The type of the elements of source.The type of the value returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SelectMany(', 'abbr': 'SelectMany(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)', 'info': "SelectMany(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)\nProjects each element of a sequence to an System.Collections.Generic.IEnumerable`1, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of source and then mapping each of those sequence elements and their corresponding source element to a result element.\nsource: A sequence of values to project.\ncollectionSelector: A transform function to apply to each element of the input sequence.\nresultSelector: A transform function to apply to each element of the intermediate sequence.The type of the elements of source.The type of the intermediate elements collected by collectionSelector.The type of the elements of the resulting sequence.\nSystem.ArgumentNullException: source or collectionSelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SelectMany(', 'abbr': 'SelectMany(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TResult>> selector)', 'info': "SelectMany(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TResult>> selector)\nProjects each element of a sequence to an System.Collections.Generic.IEnumerable`1 and flattens the resulting sequences into one sequence.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.\nsource: A sequence of values to project.\nselector: A transform function to apply to each element.The type of the elements of source.The type of the elements of the sequence returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SelectMany(', 'abbr': 'SelectMany(this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)', 'info': "SelectMany(this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)\nProjects each element of a sequence to an System.Collections.Generic.IEnumerable`1, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of source and then mapping each of those sequence elements and their corresponding source element to a result element.\nsource: A sequence of values to project.\ncollectionSelector: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.\nresultSelector: A transform function to apply to each element of the intermediate sequence.The type of the elements of source.The type of the intermediate elements collected by collectionSelector.The type of the elements of the resulting sequence.\nSystem.ArgumentNullException: source or collectionSelector or resultSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SelectMany(', 'abbr': 'SelectMany(this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TResult>> selector)', 'info': "SelectMany(this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TResult>> selector)\nProjects each element of a sequence to an System.Collections.Generic.IEnumerable`1, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.\nReturns: An System.Collections.Generic.IEnumerable`1 whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.\nsource: A sequence of values to project.\nselector: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.The type of the elements of source.The type of the elements of the sequence returned by selector.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SequenceEqual(', 'abbr': 'SequenceEqual(this IEnumerable<TSource> first, IEnumerable<TSource> second)', 'info': "SequenceEqual(this IEnumerable<TSource> first, IEnumerable<TSource> second)\nDetermines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.\nReturns: true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.\nfirst: An System.Collections.Generic.IEnumerable`1 to compare to second.\nsecond: An System.Collections.Generic.IEnumerable`1 to compare to the first sequence.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SequenceEqual(', 'abbr': 'SequenceEqual(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)', 'info': "SequenceEqual(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\nDetermines whether two sequences are equal by comparing their elements by using a specified System.Collections.Generic.IEqualityComparer`1.\nReturns: true if the two source sequences are of equal length and their corresponding elements compare equal according to comparer; otherwise, false.\nfirst: An System.Collections.Generic.IEnumerable`1 to compare to second.\nsecond: An System.Collections.Generic.IEnumerable`1 to compare to the first sequence.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to use to compare elements.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Single(', 'abbr': 'Single(this IEnumerable<TSource> source)', 'info': "Single(this IEnumerable<TSource> source)\nReturns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.\nReturns: The single element of the input sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to return the single element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.InvalidOperationException: The input sequence contains more than one element.-or-The input sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Single(', 'abbr': 'Single(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "Single(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.\nReturns: The single element of the input sequence that satisfies a condition.\nsource: An System.Collections.Generic.IEnumerable`1 to return a single element from.\npredicate: A function to test an element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.\nSystem.InvalidOperationException: No element satisfies the condition in predicate.-or-More than one element satisfies the condition in predicate.-or-The source sequence is empty.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SingleOrDefault(', 'abbr': 'SingleOrDefault(this IEnumerable<TSource> source)', 'info': "SingleOrDefault(this IEnumerable<TSource> source)\nReturns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.\nReturns: The single element of the input sequence, or default(TSource) if the sequence contains no elements.\nsource: An System.Collections.Generic.IEnumerable`1 to return the single element of.The type of the elements of source.\nSystem.ArgumentNullException: source is null.\nSystem.InvalidOperationException: The input sequence contains more than one element.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SingleOrDefault(', 'abbr': 'SingleOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "SingleOrDefault(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.\nReturns: The single element of the input sequence that satisfies the condition, or default(TSource) if no such element is found.\nsource: An System.Collections.Generic.IEnumerable`1 to return a single element from.\npredicate: A function to test an element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Skip(', 'abbr': 'Skip(this IEnumerable<TSource> source, int count)', 'info': "Skip(this IEnumerable<TSource> source, int count)\nBypasses a specified number of elements in a sequence and then returns the remaining elements.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements that occur after the specified index in the input sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to return elements from.\ncount: The number of elements to skip before returning the remaining elements.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SkipWhile(', 'abbr': 'SkipWhile(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "SkipWhile(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nBypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.\nsource: An System.Collections.Generic.IEnumerable`1 to return elements from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'SkipWhile(', 'abbr': 'SkipWhile(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)', 'info': "SkipWhile(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)\nBypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.\nsource: An System.Collections.Generic.IEnumerable`1 to return elements from.\npredicate: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, decimal?> selector)\nComputes the sum of the sequence of nullable System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Decimal.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, decimal> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, decimal> selector)\nComputes the sum of the sequence of System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Decimal.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, double?> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, double?> selector)\nComputes the sum of the sequence of nullable System.Double values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, double> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, double> selector)\nComputes the sum of the sequence of System.Double values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, float?> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, float?> selector)\nComputes the sum of the sequence of nullable System.Single values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, float> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, float> selector)\nComputes the sum of the sequence of System.Single values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, int?> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, int?> selector)\nComputes the sum of the sequence of nullable System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Int32.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, int> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, int> selector)\nComputes the sum of the sequence of System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Int32.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, long?> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, long?> selector)\nComputes the sum of the sequence of nullable System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Sum(', 'abbr': 'Sum(this IEnumerable<TSource> source, Func<TSource, long> selector)', 'info': "Sum(this IEnumerable<TSource> source, Func<TSource, long> selector)\nComputes the sum of the sequence of System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.\nReturns: The sum of the projected values.\nsource: A sequence of values that are used to calculate a sum.\nselector: A transform function to apply to each element.The type of the elements of source.\nSystem.ArgumentNullException: source or selector is null.\nSystem.OverflowException: The sum is larger than System.Int64.MaxValue.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Take(', 'abbr': 'Take(this IEnumerable<TSource> source, int count)', 'info': "Take(this IEnumerable<TSource> source, int count)\nReturns a specified number of contiguous elements from the start of a sequence.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the specified number of elements from the start of the input sequence.\nsource: The sequence to return elements from.\ncount: The number of elements to return.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'TakeWhile(', 'abbr': 'TakeWhile(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "TakeWhile(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nReturns elements from a sequence as long as a specified condition is true.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements from the input sequence that occur before the element at which the test no longer passes.\nsource: A sequence to return elements from.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'TakeWhile(', 'abbr': 'TakeWhile(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)', 'info': "TakeWhile(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)\nReturns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements from the input sequence that occur before the element at which the test no longer passes.\nsource: The sequence to return elements from.\npredicate: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToArray(', 'abbr': 'ToArray(this IEnumerable<TSource> source)', 'info': "ToArray(this IEnumerable<TSource> source)\nCreates an array from a System.Collections.Generic.IEnumerable`1.\nReturns: An array that contains the elements from the input sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to create an array from.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToDictionary(', 'abbr': 'ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)', 'info': "ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\nCreates a System.Collections.Generic.Dictionary`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function.\nReturns: A System.Collections.Generic.Dictionary`2 that contains keys and values.\nsource: An System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.Dictionary`2 from.\nkeySelector: A function to extract a key from each element.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.-or-keySelector produces a key that is null.\nSystem.ArgumentException: keySelector produces duplicate keys for two elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToDictionary(', 'abbr': 'ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)', 'info': "ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)\nCreates a System.Collections.Generic.Dictionary`2 from an System.Collections.Generic.IEnumerable`1 according to specified key selector and element selector functions.\nReturns: A System.Collections.Generic.Dictionary`2 that contains values of type TElement selected from the input sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.Dictionary`2 from.\nkeySelector: A function to extract a key from each element.\nelementSelector: A transform function to produce a result element value from each element.The type of the elements of source.The type of the key returned by keySelector.The type of the value returned by elementSelector.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.-or-keySelector produces a key that is null.\nSystem.ArgumentException: keySelector produces duplicate keys for two elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToDictionary(', 'abbr': 'ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)', 'info': "ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)\nCreates a System.Collections.Generic.Dictionary`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function, a comparer, and an element selector function.\nReturns: A System.Collections.Generic.Dictionary`2 that contains values of type TElement selected from the input sequence.\nsource: An System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.Dictionary`2 from.\nkeySelector: A function to extract a key from each element.\nelementSelector: A transform function to produce a result element value from each element.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.The type of the value returned by elementSelector.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.-or-keySelector produces a key that is null.\nSystem.ArgumentException: keySelector produces duplicate keys for two elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToDictionary(', 'abbr': 'ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)', 'info': "ToDictionary(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)\nCreates a System.Collections.Generic.Dictionary`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function and key comparer.\nReturns: A System.Collections.Generic.Dictionary`2 that contains keys and values.\nsource: An System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.Dictionary`2 from.\nkeySelector: A function to extract a key from each element.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the keys returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.-or-keySelector produces a key that is null.\nSystem.ArgumentException: keySelector produces duplicate keys for two elements.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToElementIds()', 'abbr': 'ToElementIds()', 'info': "ToElementIds()", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToElements()', 'abbr': 'ToElements()', 'info': "ToElements()", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToList(', 'abbr': 'ToList(this IEnumerable<TSource> source)', 'info': "ToList(this IEnumerable<TSource> source)\nCreates a System.Collections.Generic.List`1 from an System.Collections.Generic.IEnumerable`1.\nReturns: A System.Collections.Generic.List`1 that contains elements from the input sequence.\nsource: The System.Collections.Generic.IEnumerable`1 to create a System.Collections.Generic.List`1 from.The type of the elements of source.\nSystem.ArgumentNullException: source is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToLookup(', 'abbr': 'ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)', 'info': "ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\nCreates a System.Linq.Lookup`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function.\nReturns: A System.Linq.Lookup`2 that contains keys and values.\nsource: The System.Collections.Generic.IEnumerable`1 to create a System.Linq.Lookup`2 from.\nkeySelector: A function to extract a key from each element.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToLookup(', 'abbr': 'ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)', 'info': "ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)\nCreates a System.Linq.Lookup`2 from an System.Collections.Generic.IEnumerable`1 according to specified key selector and element selector functions.\nReturns: A System.Linq.Lookup`2 that contains values of type TElement selected from the input sequence.\nsource: The System.Collections.Generic.IEnumerable`1 to create a System.Linq.Lookup`2 from.\nkeySelector: A function to extract a key from each element.\nelementSelector: A transform function to produce a result element value from each element.The type of the elements of source.The type of the key returned by keySelector.The type of the value returned by elementSelector.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToLookup(', 'abbr': 'ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)', 'info': "ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)\nCreates a System.Linq.Lookup`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function, a comparer and an element selector function.\nReturns: A System.Linq.Lookup`2 that contains values of type TElement selected from the input sequence.\nsource: The System.Collections.Generic.IEnumerable`1 to create a System.Linq.Lookup`2 from.\nkeySelector: A function to extract a key from each element.\nelementSelector: A transform function to produce a result element value from each element.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.The type of the value returned by elementSelector.\nSystem.ArgumentNullException: source or keySelector or elementSelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToLookup(', 'abbr': 'ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)', 'info': "ToLookup(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)\nCreates a System.Linq.Lookup`2 from an System.Collections.Generic.IEnumerable`1 according to a specified key selector function and key comparer.\nReturns: A System.Linq.Lookup`2 that contains keys and values.\nsource: The System.Collections.Generic.IEnumerable`1 to create a System.Linq.Lookup`2 from.\nkeySelector: A function to extract a key from each element.\ncomparer: An System.Collections.Generic.IEqualityComparer`1 to compare keys.The type of the elements of source.The type of the key returned by keySelector.\nSystem.ArgumentNullException: source or keySelector is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'ToString()', 'abbr': 'ToString()', 'info': "ToString()\nReturns a string that represents the current object.\nReturns: A string that represents the current object.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Union(', 'abbr': 'Union(this IEnumerable<TSource> first, IEnumerable<TSource> second)', 'info': "Union(this IEnumerable<TSource> first, IEnumerable<TSource> second)\nProduces the set union of two sequences by using the default equality comparer.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements from both input sequences, excluding duplicates.\nfirst: An System.Collections.Generic.IEnumerable`1 whose distinct elements form the first set for the union.\nsecond: An System.Collections.Generic.IEnumerable`1 whose distinct elements form the second set for the union.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Union(', 'abbr': 'Union(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)', 'info': "Union(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\nProduces the set union of two sequences by using a specified System.Collections.Generic.IEqualityComparer`1.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains the elements from both input sequences, excluding duplicates.\nfirst: An System.Collections.Generic.IEnumerable`1 whose distinct elements form the first set for the union.\nsecond: An System.Collections.Generic.IEnumerable`1 whose distinct elements form the second set for the union.\ncomparer: The System.Collections.Generic.IEqualityComparer`1 to compare values.The type of the elements of the input sequences.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'UnionWith(', 'abbr': 'UnionWith(FilteredElementCollector other)', 'info': "UnionWith(FilteredElementCollector other)", 'icase': 1, 'dup':1 })
add(words, {'word': 'Where(', 'abbr': 'Where(this IEnumerable<TSource> source, Func<TSource, bool> predicate)', 'info': "Where(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\nFilters a sequence of values based on a predicate.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements from the input sequence that satisfy the condition.\nsource: An System.Collections.Generic.IEnumerable`1 to filter.\npredicate: A function to test each element for a condition.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'Where(', 'abbr': 'Where(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)', 'info': "Where(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)\nFilters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements from the input sequence that satisfy the condition.\nsource: An System.Collections.Generic.IEnumerable`1 to filter.\npredicate: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.The type of the elements of source.\nSystem.ArgumentNullException: source or predicate is null.", 'icase': 1, 'dup':1 })
add(words, {'word': 'WhereElementIsCurveDriven()', 'abbr': 'WhereElementIsCurveDriven()', 'info': "WhereElementIsCurveDriven()", 'icase': 1, 'dup':1 })
add(words, {'word': 'WhereElementIsElementType()', 'abbr': 'WhereElementIsElementType()', 'info': "WhereElementIsElementType()", 'icase': 1, 'dup':1 })
add(words, {'word': 'WhereElementIsNotElementType()', 'abbr': 'WhereElementIsNotElementType()', 'info': "WhereElementIsNotElementType()", 'icase': 1, 'dup':1 })
add(words, {'word': 'WhereElementIsViewIndependent()', 'abbr': 'WhereElementIsViewIndependent()', 'info': "WhereElementIsViewIndependent()", 'icase': 1, 'dup':1 })
add(words, {'word': 'WherePasses(', 'abbr': 'WherePasses(ElementFilter filter)', 'info': "WherePasses(ElementFilter filter)", 'icase': 1, 'dup':1 })
add(words, {'word': 'Zip(', 'abbr': 'Zip(this IEnumerable<TFirst> first, IEnumerable<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)', 'info': "Zip(this IEnumerable<TFirst> first, IEnumerable<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)\nApplies a specified function to the corresponding elements of two sequences, producing a sequence of the results.\nReturns: An System.Collections.Generic.IEnumerable`1 that contains elements of the two input sequences, combined by resultSelector.\nfirst: The first input sequence.\nsecond: The second input sequence.\nresultSelector: A function that specifies how to combine the corresponding elements of the two sequences.The type of the elements of the first input sequence.The type of the elements of the second input sequence.The type of the elements of the result sequence.\nSystem.ArgumentNullException: first or second is null.", 'icase': 1, 'dup':1 })
